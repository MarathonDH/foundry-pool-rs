/*
 * Foundry USA Pool API
 *
 * The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ActivityLogEntryV2 {
    #[serde(rename = "userType", skip_serializing_if = "Option::is_none")]
    pub user_type: Option<String>,
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<i32>,
    #[serde(rename = "userEmail", skip_serializing_if = "Option::is_none")]
    pub user_email: Option<String>,
    #[serde(rename = "ip")]
    pub ip: String,
    #[serde(rename = "subAccount", skip_serializing_if = "Option::is_none")]
    pub sub_account: Option<String>,
    #[serde(rename = "coin", skip_serializing_if = "Option::is_none")]
    pub coin: Option<String>,
    #[serde(rename = "activityType")]
    pub activity_type: String,
    #[serde(rename = "activityDetails")]
    pub activity_details: String,
    #[serde(rename = "activityAt")]
    pub activity_at: String,
    #[serde(rename = "description")]
    pub description: String,
}

impl ActivityLogEntryV2 {
    pub fn new(ip: String, activity_type: String, activity_details: String, activity_at: String, description: String) -> ActivityLogEntryV2 {
        ActivityLogEntryV2 {
            user_type: None,
            group_id: None,
            user_email: None,
            ip,
            sub_account: None,
            coin: None,
            activity_type,
            activity_details,
            activity_at,
            description,
        }
    }
}

