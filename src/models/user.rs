/*
 * Foundry USA Pool API
 *
 * The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct User {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "emailAddress")]
    pub email_address: String,
    #[serde(rename = "fullName")]
    pub full_name: String,
    #[serde(rename = "preferredName")]
    pub preferred_name: String,
    #[serde(rename = "isActive")]
    pub is_active: bool,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "userRole")]
    pub user_role: Box<models::UserRole>,
    #[serde(rename = "group")]
    pub group: Box<models::Group>,
    #[serde(rename = "groups")]
    pub groups: Vec<models::UserGroup>,
    #[serde(rename = "authId")]
    pub auth_id: String,
    #[serde(rename = "defaultSubAccountRole")]
    pub default_sub_account_role: Box<models::UserSubAccountRole>,
    #[serde(rename = "adminRole")]
    pub admin_role: Box<models::AdminRole>,
}

impl User {
    pub fn new(id: i32, email_address: String, full_name: String, preferred_name: String, is_active: bool, created_at: String, updated_at: String, user_role: models::UserRole, group: models::Group, groups: Vec<models::UserGroup>, auth_id: String, default_sub_account_role: models::UserSubAccountRole, admin_role: models::AdminRole) -> User {
        User {
            id,
            email_address,
            full_name,
            preferred_name,
            is_active,
            created_at,
            updated_at,
            user_role: Box::new(user_role),
            group: Box::new(group),
            groups,
            auth_id,
            default_sub_account_role: Box::new(default_sub_account_role),
            admin_role: Box::new(admin_role),
        }
    }
}

