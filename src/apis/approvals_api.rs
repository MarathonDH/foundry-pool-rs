/*
 * Foundry USA Pool API
 *
 * The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.
 *
 * The version of the OpenAPI document: 6.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`approval_action`]
#[derive(Clone, Debug)]
pub struct ApprovalActionParams {
    /// OAuth2.0 access token.
    pub authorization: String,
    /// Approval request ID
    pub approval_request_id: String,
    /// Accepted values are \"approve\" or \"reject\"
    pub body: serde_json::Value,
}

/// struct for passing parameters to the method [`update_group_approval_threshold`]
#[derive(Clone, Debug)]
pub struct UpdateGroupApprovalThresholdParams {
    /// OAuth2.0 access token.
    pub authorization: String,
    /// Id of the Group to update
    pub group_id: i32,
    /// New Approval Threshold for Group
    pub new_approval_threshold: i32,
}

/// struct for typed errors of method [`approval_action`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApprovalActionError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_group_approval_threshold`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateGroupApprovalThresholdError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// Approve or reject an approval request. Requires approver permissions.
pub async fn approval_action(
    configuration: &configuration::Configuration,
    params: ApprovalActionParams,
) -> Result<String, Error<ApprovalActionError>> {
    let uri_str = format!(
        "{}/approvals/{approvalRequestId}",
        configuration.base_path,
        approvalRequestId = crate::apis::urlencode(params.approval_request_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", params.authorization.to_string());
    req_builder = req_builder.json(&params.body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `String`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `String`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApprovalActionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update a Group's Approval Threshold, or Create Approval Request for the same.  Requires group or sub-account owner/approver permission
pub async fn update_group_approval_threshold(
    configuration: &configuration::Configuration,
    params: UpdateGroupApprovalThresholdParams,
) -> Result<models::GroupThresholdUpdateResponse, Error<UpdateGroupApprovalThresholdError>> {
    let uri_str = format!(
        "{}/group/{groupId}/update_approval_threshold/{newApprovalThreshold}",
        configuration.base_path,
        groupId = params.group_id,
        newApprovalThreshold = params.new_approval_threshold
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", params.authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GroupThresholdUpdateResponse`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GroupThresholdUpdateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateGroupApprovalThresholdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
