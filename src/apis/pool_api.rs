/*
 * Foundry USA Pool API
 *
 * The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_pool_hashrate`]
#[derive(Clone, Debug)]
pub struct GetPoolHashrateParams {
    /// Name of requested coin.
    pub coin: Option<String>
}

/// struct for passing parameters to the method [`get_pool_stats`]
#[derive(Clone, Debug)]
pub struct GetPoolStatsParams {
    /// Name of requested coin.
    pub coin: Option<String>
}


/// struct for typed errors of method [`get_pool_hashrate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPoolHashrateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_pool_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPoolStatsError {
    UnknownValue(serde_json::Value),
}


/// Get pool hashrate (24 hour avg in GH/s). No authentication required.
pub async fn get_pool_hashrate(configuration: &configuration::Configuration, params: GetPoolHashrateParams) -> Result<String, Error<GetPoolHashrateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let coin = params.coin;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/pool_hashrate", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = coin {
        local_var_req_builder = local_var_req_builder.query(&[("coin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPoolHashrateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get pool stats.  No authentication required.
pub async fn get_pool_stats(configuration: &configuration::Configuration, params: GetPoolStatsParams) -> Result<models::PoolStats, Error<GetPoolStatsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let coin = params.coin;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/pool_stats", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = coin {
        local_var_req_builder = local_var_req_builder.query(&[("coin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPoolStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

