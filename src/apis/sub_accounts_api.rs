/*
 * Foundry USA Pool API
 *
 * The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.
 *
 * The version of the OpenAPI document: 6.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`get_cumulative_granted_sub_account_stats`]
#[derive(Clone, Debug)]
pub struct GetCumulativeGrantedSubAccountStatsParams {
    /// User ID argument is optional. Defaults to logged in user
    pub user_id: String,
    /// OAuth2.0 access token.
    pub authorization: Option<String>,
    /// Name of requested coin. Default value is BTC.
    pub coin: Option<String>,
    /// Optional list of group IDs to filter by.
    pub group_ids_list: Option<Vec<i32>>,
}

/// struct for passing parameters to the method [`get_cumulative_granted_sub_accounts_hashrate`]
#[derive(Clone, Debug)]
pub struct GetCumulativeGrantedSubAccountsHashrateParams {
    /// User ID argument is optional. Defaults to logged in user
    pub user_id: String,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// Name of requested coin. Default value is BTC.
    pub coin: Option<String>,
    /// Start date inclusive, in YYYY-MM-DD string format. Default value is one week ago.
    pub start: Option<String>,
    /// End date inclusive, in YYYY-MM-DD string format. Default value is current time.
    pub end: Option<String>,
    /// Start date inclusive, in unix epoch time (milliseconds). Default value is one week ago.
    pub start_date_unix_ms: Option<i64>,
    /// End date inclusive, in unix epoch time (milliseconds). Default value is current time.
    pub end_date_unix_ms: Option<i64>,
    /// Optional list of group IDs to filter by.
    pub group_ids_list: Option<Vec<i32>>,
}

/// struct for passing parameters to the method [`get_cumulative_granted_sub_accounts_hashrate1`]
#[derive(Clone, Debug)]
pub struct GetCumulativeGrantedSubAccountsHashrate1Params {
    /// User ID argument is optional. Defaults to logged in user
    pub user_id: String,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>,
    /// Name of requested coin. Default value is BTC.
    pub coin: Option<String>,
    /// Start date inclusive, in YYYY-MM-DD string format. Default value is 30 days ago.
    pub start: Option<String>,
    /// End date inclusive, in YYYY-MM-DD string format. Default value is current day.
    pub end: Option<String>,
    /// Optional list of group IDs to filter by.
    pub group_ids_list: Option<Vec<i32>>,
}

/// struct for passing parameters to the method [`get_granted_sub_accounts`]
#[derive(Clone, Debug)]
pub struct GetGrantedSubAccountsParams {
    /// OAuth2.0 access token.
    pub authorization: String,
}

/// struct for typed errors of method [`get_cumulative_granted_sub_account_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCumulativeGrantedSubAccountStatsError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cumulative_granted_sub_accounts_hashrate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCumulativeGrantedSubAccountsHashrateError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cumulative_granted_sub_accounts_hashrate1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCumulativeGrantedSubAccountsHashrate1Error {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_granted_sub_accounts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetGrantedSubAccountsError {
    Status403(),
    UnknownValue(serde_json::Value),
}

/// Get cumulated stats for sub-accounts that the user owns or has granted access to. User authentication required to see their own granted sub-accounts. Admin authentication with read permission required to see other users granted sub-accounts.
pub async fn get_cumulative_granted_sub_account_stats(
    configuration: &configuration::Configuration,
    params: GetCumulativeGrantedSubAccountStatsParams,
) -> Result<models::CumulativeSubAccountStats, Error<GetCumulativeGrantedSubAccountStatsError>> {
    let uri_str = format!(
        "{}/cumulated_granted_subaccount_stats/{userId}",
        configuration.base_path,
        userId = crate::apis::urlencode(params.user_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.coin {
        req_builder = req_builder.query(&[("coin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.group_ids_list {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .iter()
                    .map(|p| ("groupIdsList".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "groupIdsList",
                &param_value
                    .iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CumulativeSubAccountStats`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CumulativeSubAccountStats`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCumulativeGrantedSubAccountStatsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get cumulative hashrate per hour for all granted sub-accounts that the user owns or has been granted access to, for a requested date range & coin. User authentication required to see their own granted sub-accounts. Admin authentication with read permission required to see other users granted sub-accounts.
pub async fn get_cumulative_granted_sub_accounts_hashrate(
    configuration: &configuration::Configuration,
    params: GetCumulativeGrantedSubAccountsHashrateParams,
) -> Result<Vec<models::HashrateResponse>, Error<GetCumulativeGrantedSubAccountsHashrateError>> {
    let uri_str = format!(
        "{}/cumulated_subaccount_hashrate_hour/{userId}",
        configuration.base_path,
        userId = crate::apis::urlencode(params.user_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.coin {
        req_builder = req_builder.query(&[("coin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.start {
        req_builder = req_builder.query(&[("start", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.end {
        req_builder = req_builder.query(&[("end", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.start_date_unix_ms {
        req_builder = req_builder.query(&[("startDateUnixMs", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.end_date_unix_ms {
        req_builder = req_builder.query(&[("endDateUnixMs", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.group_ids_list {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .iter()
                    .map(|p| ("groupIdsList".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "groupIdsList",
                &param_value
                    .iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_api_key {
        req_builder = req_builder.header("X-API-KEY", param_value.to_string());
    }
    if let Some(param_value) = params.authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::HashrateResponse&gt;`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::HashrateResponse&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCumulativeGrantedSubAccountsHashrateError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get cumulative hashrate per day for all granted sub-accounts that the user owns or has been granted access to, for a requested date range & coin. User authentication required to see their own granted sub-accounts. Admin authentication with read permission required to see other users granted sub-accounts.
pub async fn get_cumulative_granted_sub_accounts_hashrate1(
    configuration: &configuration::Configuration,
    params: GetCumulativeGrantedSubAccountsHashrate1Params,
) -> Result<Vec<models::HashrateResponse>, Error<GetCumulativeGrantedSubAccountsHashrate1Error>> {
    let uri_str = format!(
        "{}/cumulated_subaccount_hashrate_day/{userId}",
        configuration.base_path,
        userId = crate::apis::urlencode(params.user_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.coin {
        req_builder = req_builder.query(&[("coin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.start {
        req_builder = req_builder.query(&[("start", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.end {
        req_builder = req_builder.query(&[("end", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.group_ids_list {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .iter()
                    .map(|p| ("groupIdsList".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "groupIdsList",
                &param_value
                    .iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }
    if let Some(param_value) = params.x_api_key {
        req_builder = req_builder.header("X-API-KEY", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::HashrateResponse&gt;`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::HashrateResponse&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCumulativeGrantedSubAccountsHashrate1Error> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get all active sub-account names the logged-in user has access to, as well as their sub-account role info, grouped by group name
pub async fn get_granted_sub_accounts(
    configuration: &configuration::Configuration,
    params: GetGrantedSubAccountsParams,
) -> Result<Vec<models::GrantedSubAccountListResponse>, Error<GetGrantedSubAccountsError>> {
    let uri_str = format!("{}/granted_subaccounts", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", params.authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GrantedSubAccountListResponse&gt;`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GrantedSubAccountListResponse&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetGrantedSubAccountsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
