/*
 * Foundry USA Pool API
 *
 * The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_cumulative_granted_sub_account_stats`]
#[derive(Clone, Debug)]
pub struct GetCumulativeGrantedSubAccountStatsParams {
    /// User ID argument is optional. Defaults to logged in user
    pub user_id: String,
    /// OAuth2.0 access token.
    pub authorization: Option<String>,
    /// Name of requested coin. Default value is BTC.
    pub coin: Option<String>,
    /// Valid values are \"highestHashrate\" or \"subAccountName\".
    pub sort: Option<String>,
    /// Optional list of group IDs to filter by.
    pub group_ids_list: Option<Vec<i32>>
}

/// struct for passing parameters to the method [`get_cumulative_granted_sub_accounts_hashrate`]
#[derive(Clone, Debug)]
pub struct GetCumulativeGrantedSubAccountsHashrateParams {
    /// User ID argument is optional. Defaults to logged in user
    pub user_id: String,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// Name of requested coin. Default value is BTC.
    pub coin: Option<String>,
    /// Start date inclusive, in YYYY-MM-DD string format. Default value is one week ago.
    pub start: Option<String>,
    /// End date inclusive, in YYYY-MM-DD string format. Default value is current time.
    pub end: Option<String>,
    /// Start date inclusive, in unix epoch time (milliseconds). Default value is one week ago.
    pub start_date_unix_ms: Option<i64>,
    /// End date inclusive, in unix epoch time (milliseconds). Default value is current time.
    pub end_date_unix_ms: Option<i64>,
    /// Optional list of group IDs to filter by.
    pub group_ids_list: Option<Vec<i32>>
}

/// struct for passing parameters to the method [`get_cumulative_granted_sub_accounts_hashrate1`]
#[derive(Clone, Debug)]
pub struct GetCumulativeGrantedSubAccountsHashrate1Params {
    /// User ID argument is optional. Defaults to logged in user
    pub user_id: String,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>,
    /// Name of requested coin. Default value is BTC.
    pub coin: Option<String>,
    /// Start date inclusive, in YYYY-MM-DD string format. Default value is 30 days ago.
    pub start: Option<String>,
    /// End date inclusive, in YYYY-MM-DD string format. Default value is current day.
    pub end: Option<String>,
    /// Optional list of group IDs to filter by.
    pub group_ids_list: Option<Vec<i32>>
}


/// struct for typed errors of method [`get_cumulative_granted_sub_account_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCumulativeGrantedSubAccountStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cumulative_granted_sub_accounts_hashrate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCumulativeGrantedSubAccountsHashrateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cumulative_granted_sub_accounts_hashrate1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCumulativeGrantedSubAccountsHashrate1Error {
    UnknownValue(serde_json::Value),
}


/// Get cumulated stats for sub-accounts that the user owns or has granted access to. User authentication required to see their own granted sub-accounts. Admin authentication with read permission required to see other users granted sub-accounts.
pub async fn get_cumulative_granted_sub_account_stats(configuration: &configuration::Configuration, params: GetCumulativeGrantedSubAccountStatsParams) -> Result<models::CumulativeSubAccountStats, Error<GetCumulativeGrantedSubAccountStatsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;
    let authorization = params.authorization;
    let coin = params.coin;
    let sort = params.sort;
    let group_ids_list = params.group_ids_list;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/cumulated_granted_subaccount_stats/{userId}", local_var_configuration.base_path, userId=crate::apis::urlencode(user_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = coin {
        local_var_req_builder = local_var_req_builder.query(&[("coin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_ids_list {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groupIdsList".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groupIdsList", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCumulativeGrantedSubAccountStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get cumulative hashrate per hour for all granted sub-accounts that the user owns or has been granted access to, for a requested date range & coin. User authentication required to see their own granted sub-accounts. Admin authentication with read permission required to see other users granted sub-accounts.
pub async fn get_cumulative_granted_sub_accounts_hashrate(configuration: &configuration::Configuration, params: GetCumulativeGrantedSubAccountsHashrateParams) -> Result<Vec<models::HashrateResponse>, Error<GetCumulativeGrantedSubAccountsHashrateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;
    let x_api_key = params.x_api_key;
    let authorization = params.authorization;
    let coin = params.coin;
    let start = params.start;
    let end = params.end;
    let start_date_unix_ms = params.start_date_unix_ms;
    let end_date_unix_ms = params.end_date_unix_ms;
    let group_ids_list = params.group_ids_list;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/cumulated_subaccount_hashrate_hour/{userId}", local_var_configuration.base_path, userId=crate::apis::urlencode(user_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = coin {
        local_var_req_builder = local_var_req_builder.query(&[("coin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start {
        local_var_req_builder = local_var_req_builder.query(&[("start", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end {
        local_var_req_builder = local_var_req_builder.query(&[("end", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_date_unix_ms {
        local_var_req_builder = local_var_req_builder.query(&[("startDateUnixMs", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_date_unix_ms {
        local_var_req_builder = local_var_req_builder.query(&[("endDateUnixMs", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_ids_list {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groupIdsList".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groupIdsList", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_api_key {
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCumulativeGrantedSubAccountsHashrateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get cumulative hashrate per day for all granted sub-accounts that the user owns or has been granted access to, for a requested date range & coin. User authentication required to see their own granted sub-accounts. Admin authentication with read permission required to see other users granted sub-accounts.
pub async fn get_cumulative_granted_sub_accounts_hashrate1(configuration: &configuration::Configuration, params: GetCumulativeGrantedSubAccountsHashrate1Params) -> Result<Vec<models::HashrateResponse>, Error<GetCumulativeGrantedSubAccountsHashrate1Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;
    let authorization = params.authorization;
    let x_api_key = params.x_api_key;
    let coin = params.coin;
    let start = params.start;
    let end = params.end;
    let group_ids_list = params.group_ids_list;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/cumulated_subaccount_hashrate_day/{userId}", local_var_configuration.base_path, userId=crate::apis::urlencode(user_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = coin {
        local_var_req_builder = local_var_req_builder.query(&[("coin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start {
        local_var_req_builder = local_var_req_builder.query(&[("start", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end {
        local_var_req_builder = local_var_req_builder.query(&[("end", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_ids_list {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groupIdsList".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groupIdsList", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_api_key {
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCumulativeGrantedSubAccountsHashrate1Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

