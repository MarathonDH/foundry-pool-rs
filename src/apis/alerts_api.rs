/*
 * Foundry USA Pool API
 *
 * The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`add_email_to_alert`]
#[derive(Clone, Debug)]
pub struct AddEmailToAlertParams {
    /// Coin
    pub coin_string: String,
    /// Sub Account Name
    pub sub_account_name: String,
    /// Alert ID
    pub alert_id: i32,
    /// Email Address to be added to the alert.
    pub email_address: String,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>
}

/// struct for passing parameters to the method [`create_tag_alert`]
#[derive(Clone, Debug)]
pub struct CreateTagAlertParams {
    /// Coin
    pub coin_string: String,
    /// Sub Account Name
    pub sub_account_name: String,
    /// Tag Name
    pub tag_name: String,
    /// List of email addresses to be notified when the alert is triggered.
    pub request_body: Vec<String>,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>,
    /// Hashrate threshold for the alert in GH/s.
    pub hashrate_threshold: Option<i64>,
    /// Active Workers threshold for the alert.
    pub active_workers_threshold: Option<i32>
}

/// struct for passing parameters to the method [`delete_alert`]
#[derive(Clone, Debug)]
pub struct DeleteAlertParams {
    /// Coin
    pub coin_string: String,
    /// Sub Account Name
    pub sub_account_name: String,
    /// Alert ID
    pub alert_id: i32,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>
}

/// struct for passing parameters to the method [`get_tag_alerts`]
#[derive(Clone, Debug)]
pub struct GetTagAlertsParams {
    /// Coin
    pub coin_string: String,
    /// Sub Account Name
    pub sub_account_name: String,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>
}

/// struct for passing parameters to the method [`remove_email_from_alert`]
#[derive(Clone, Debug)]
pub struct RemoveEmailFromAlertParams {
    /// Coin
    pub coin_string: String,
    /// Sub Account Name
    pub sub_account_name: String,
    /// Alert ID
    pub alert_id: i32,
    /// Email Address to be added to the alert.
    pub email_address: String,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>
}


/// struct for typed errors of method [`add_email_to_alert`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddEmailToAlertError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_tag_alert`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTagAlertError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_alert`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAlertError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_tag_alerts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTagAlertsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`remove_email_from_alert`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveEmailFromAlertError {
    Status400(),
    UnknownValue(serde_json::Value),
}


/// Add an email address to existing alert. Requires permission to edit workers.
pub async fn add_email_to_alert(configuration: &configuration::Configuration, params: AddEmailToAlertParams) -> Result<i32, Error<AddEmailToAlertError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let coin_string = params.coin_string;
    let sub_account_name = params.sub_account_name;
    let alert_id = params.alert_id;
    let email_address = params.email_address;
    let authorization = params.authorization;
    let x_api_key = params.x_api_key;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/alerts/addEmail/{coinString}/{subAccountName}/{alertId}/{emailAddress}", local_var_configuration.base_path, coinString=crate::apis::urlencode(coin_string), subAccountName=crate::apis::urlencode(sub_account_name), alertId=alert_id, emailAddress=crate::apis::urlencode(email_address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_api_key {
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddEmailToAlertError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Creates an alert for a specified tag. ID of created alert is returned. Note: You can also add an alert for All workers by supplying tagName value as 'all'. Requires permission to edit workers.
pub async fn create_tag_alert(configuration: &configuration::Configuration, params: CreateTagAlertParams) -> Result<i32, Error<CreateTagAlertError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let coin_string = params.coin_string;
    let sub_account_name = params.sub_account_name;
    let tag_name = params.tag_name;
    let request_body = params.request_body;
    let authorization = params.authorization;
    let x_api_key = params.x_api_key;
    let hashrate_threshold = params.hashrate_threshold;
    let active_workers_threshold = params.active_workers_threshold;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/alerts/tagAlerts/{coinString}/{subAccountName}/{tagName}", local_var_configuration.base_path, coinString=crate::apis::urlencode(coin_string), subAccountName=crate::apis::urlencode(sub_account_name), tagName=crate::apis::urlencode(tag_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = hashrate_threshold {
        local_var_req_builder = local_var_req_builder.query(&[("hashrateThreshold", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = active_workers_threshold {
        local_var_req_builder = local_var_req_builder.query(&[("activeWorkersThreshold", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_api_key {
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.json(&request_body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateTagAlertError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete an alert. Requires permission to edit workers.
pub async fn delete_alert(configuration: &configuration::Configuration, params: DeleteAlertParams) -> Result<(), Error<DeleteAlertError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let coin_string = params.coin_string;
    let sub_account_name = params.sub_account_name;
    let alert_id = params.alert_id;
    let authorization = params.authorization;
    let x_api_key = params.x_api_key;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/alerts/{coinString}/{subAccountName}/{alertId}", local_var_configuration.base_path, coinString=crate::apis::urlencode(coin_string), subAccountName=crate::apis::urlencode(sub_account_name), alertId=alert_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_api_key {
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteAlertError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get alerts configured for worker tags. Requires permission to view hashrate.
pub async fn get_tag_alerts(configuration: &configuration::Configuration, params: GetTagAlertsParams) -> Result<models::TagAlertsResponse, Error<GetTagAlertsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let coin_string = params.coin_string;
    let sub_account_name = params.sub_account_name;
    let authorization = params.authorization;
    let x_api_key = params.x_api_key;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/alerts/tagAlerts/{coinString}/{subAccountName}", local_var_configuration.base_path, coinString=crate::apis::urlencode(coin_string), subAccountName=crate::apis::urlencode(sub_account_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_api_key {
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetTagAlertsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove email from the alert. Requires permission to edit workers.
pub async fn remove_email_from_alert(configuration: &configuration::Configuration, params: RemoveEmailFromAlertParams) -> Result<(), Error<RemoveEmailFromAlertError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let coin_string = params.coin_string;
    let sub_account_name = params.sub_account_name;
    let alert_id = params.alert_id;
    let email_address = params.email_address;
    let authorization = params.authorization;
    let x_api_key = params.x_api_key;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/alerts/removeEmail/{coinString}/{subAccountName}/{alertId}/{emailAddress}", local_var_configuration.base_path, coinString=crate::apis::urlencode(coin_string), subAccountName=crate::apis::urlencode(sub_account_name), alertId=alert_id, emailAddress=crate::apis::urlencode(email_address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_api_key {
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<RemoveEmailFromAlertError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

