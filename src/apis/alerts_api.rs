/*
 * Foundry USA Pool API
 *
 * The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.
 *
 * The version of the OpenAPI document: 6.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_new_sub_account_alert`]
#[derive(Clone, Debug)]
pub struct CreateNewSubAccountAlertParams {
    /// Coin
    pub coin_string: String,
    /// Sub Account Name
    pub sub_account_name: String,
    /// List of email addresses to be notified when the alert is triggered.
    pub request_body: Vec<String>,
    /// OAuth2.0 access token.
    pub authorization: Option<String>,
    /// Hashrate threshold for the alert in GH/s.
    pub hashrate_threshold: Option<i64>,
    /// Active Workers threshold for the alert.
    pub active_workers_threshold: Option<i32>,
}

/// struct for passing parameters to the method [`delete_alert`]
#[derive(Clone, Debug)]
pub struct DeleteAlertParams {
    /// Coin
    pub coin_string: String,
    /// Sub Account Name
    pub sub_account_name: String,
    /// Alert ID
    pub alert_id: i32,
    /// OAuth2.0 access token.
    pub authorization: Option<String>,
}

/// struct for passing parameters to the method [`get_sub_account_alerts`]
#[derive(Clone, Debug)]
pub struct GetSubAccountAlertsParams {
    /// User ID is optional. Defaults to logged in user
    pub user_id: String,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>,
    /// Coin
    pub coin_string: Option<String>,
    /// List of group ids.
    pub group_ids_list: Option<Vec<i32>>,
    /// triggeredOnly is optional. It's a boolean that determines if all alerts are returned or only triggered alerts. Defaults to 'false' so all alerts are returned.
    pub triggered_only: Option<bool>,
    /// Valid values are 0 and positive integers. Default value is 0.
    pub page_number: Option<i32>,
    /// Valid values are -1 (representing max size) and positive integers. Default value is -1.
    pub page_size: Option<i32>,
    /// Valid values are \"ascSubAccount\" and \"descSubAccount\". Default value is ascSubAccount.
    pub sort: Option<String>,
}

/// struct for passing parameters to the method [`update_sub_account_alert`]
#[derive(Clone, Debug)]
pub struct UpdateSubAccountAlertParams {
    /// Coin
    pub coin_string: String,
    /// Sub Account Name
    pub sub_account_name: String,
    /// Alert ID
    pub alert_id: i32,
    /// List of email addresses to be notified when the alert is triggered.
    pub request_body: Vec<String>,
    /// OAuth2.0 access token.
    pub authorization: Option<String>,
    /// Hashrate threshold for the alert in GH/s.
    pub hashrate_threshold: Option<i64>,
    /// Active Workers threshold for the alert.
    pub active_workers_threshold: Option<i32>,
}

/// struct for typed errors of method [`create_new_sub_account_alert`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateNewSubAccountAlertError {
    Status400(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_alert`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAlertError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_sub_account_alerts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubAccountAlertsError {
    Status403(),
    Status400(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_sub_account_alert`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSubAccountAlertError {
    Status400(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// Creates an alert for a specified sub-account. ID of created alert is returned. Requires permission to view hashrate.
pub async fn create_new_sub_account_alert(
    configuration: &configuration::Configuration,
    params: CreateNewSubAccountAlertParams,
) -> Result<i32, Error<CreateNewSubAccountAlertError>> {
    let uri_str = format!(
        "{}/alerts/addSubAccount/{coinString}/{subAccountName}",
        configuration.base_path,
        coinString = crate::apis::urlencode(params.coin_string),
        subAccountName = crate::apis::urlencode(params.sub_account_name)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.hashrate_threshold {
        req_builder = req_builder.query(&[("hashrateThreshold", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.active_workers_threshold {
        req_builder = req_builder.query(&[("activeWorkersThreshold", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }
    req_builder = req_builder.json(&params.request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `i32`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `i32`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateNewSubAccountAlertError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete an alert. Requires permission to view hashrate.
pub async fn delete_alert(
    configuration: &configuration::Configuration,
    params: DeleteAlertParams,
) -> Result<(), Error<DeleteAlertError>> {
    let uri_str = format!(
        "{}/alerts/{coinString}/{subAccountName}/{alertId}",
        configuration.base_path,
        coinString = crate::apis::urlencode(params.coin_string),
        subAccountName = crate::apis::urlencode(params.sub_account_name),
        alertId = params.alert_id
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteAlertError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get alerts for all sub-accounts in selected group id(s) or in all the user's groups, if no group ids are submitted in request. Requires permission to view hashrate.
pub async fn get_sub_account_alerts(
    configuration: &configuration::Configuration,
    params: GetSubAccountAlertsParams,
) -> Result<models::AlertsListResponse, Error<GetSubAccountAlertsError>> {
    let uri_str = format!(
        "{}/alerts/subaccount_alerts/{userId}",
        configuration.base_path,
        userId = crate::apis::urlencode(params.user_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.coin_string {
        req_builder = req_builder.query(&[("coinString", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.group_ids_list {
        req_builder = match "multi" {
            "multi" => req_builder.query(
                &param_value
                    .iter()
                    .map(|p| ("groupIdsList".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "groupIdsList",
                &param_value
                    .iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = params.triggered_only {
        req_builder = req_builder.query(&[("triggeredOnly", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_number {
        req_builder = req_builder.query(&[("pageNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("pageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }
    if let Some(param_value) = params.x_api_key {
        req_builder = req_builder.header("X-API-KEY", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AlertsListResponse`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AlertsListResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSubAccountAlertsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Updates an existing sub-account alert. Requires permission to view hashrate.
pub async fn update_sub_account_alert(
    configuration: &configuration::Configuration,
    params: UpdateSubAccountAlertParams,
) -> Result<i32, Error<UpdateSubAccountAlertError>> {
    let uri_str = format!(
        "{}/alerts/updateSubAccountAlert/{coinString}/{subAccountName}/{alertId}",
        configuration.base_path,
        coinString = crate::apis::urlencode(params.coin_string),
        subAccountName = crate::apis::urlencode(params.sub_account_name),
        alertId = params.alert_id
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = params.hashrate_threshold {
        req_builder = req_builder.query(&[("hashrateThreshold", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.active_workers_threshold {
        req_builder = req_builder.query(&[("activeWorkersThreshold", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }
    req_builder = req_builder.json(&params.request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `i32`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `i32`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateSubAccountAlertError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
