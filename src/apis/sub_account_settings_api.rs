/*
 * Foundry USA Pool API
 *
 * The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`create_api_key`]
#[derive(Clone, Debug)]
pub struct CreateApiKeyParams {
    /// Name of sub-account.
    pub sub_account_name: String,
    /// OAuth2.0 access token.
    pub authorization: Option<String>,
    /// This can be any text you want under 100 characters. It's intended for describing who you'll be sharing the key with. Default value is \"default\".
    pub key_name: Option<String>,
    /// Valid values are \"technician\" (permission to view hashrate and workers) and \"accountant\" (permission to view hashrate, workers, and financial data). Default value is \"technician\".
    pub role: Option<String>
}

/// struct for passing parameters to the method [`delete_api_key`]
#[derive(Clone, Debug)]
pub struct DeleteApiKeyParams {
    /// Name of sub-account.
    pub sub_account_name: String,
    /// API key to delete.
    pub api_key: String,
    /// OAuth2.0 access token.
    pub authorization: Option<String>
}

/// struct for passing parameters to the method [`get_api_key`]
#[derive(Clone, Debug)]
pub struct GetApiKeyParams {
    /// Name of sub-account.
    pub sub_account_name: String,
    /// OAuth2.0 access token.
    pub authorization: Option<String>,
    /// Valid values are \"technician\" (permission to view hashrate and workers) and \"accountant\" (permission to view hashrate, workers, and financial data). Default value is \"technician\".
    pub role: Option<String>
}


/// struct for typed errors of method [`create_api_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateApiKeyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_api_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteApiKeyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_api_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetApiKeyError {
    UnknownValue(serde_json::Value),
}


/// Create API key for a given sub-account. Requires sub-account owner authentication.
pub async fn create_api_key(configuration: &configuration::Configuration, params: CreateApiKeyParams) -> Result<(), Error<CreateApiKeyError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sub_account_name = params.sub_account_name;
    let authorization = params.authorization;
    let key_name = params.key_name;
    let role = params.role;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api_keys/{subAccountName}", local_var_configuration.base_path, subAccountName=crate::apis::urlencode(sub_account_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = key_name {
        local_var_req_builder = local_var_req_builder.query(&[("keyName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role {
        local_var_req_builder = local_var_req_builder.query(&[("role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CreateApiKeyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete API key for a given sub-account. Requires permission to view hashrate.
pub async fn delete_api_key(configuration: &configuration::Configuration, params: DeleteApiKeyParams) -> Result<(), Error<DeleteApiKeyError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sub_account_name = params.sub_account_name;
    let api_key = params.api_key;
    let authorization = params.authorization;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api_keys/{subAccountName}/{apiKey}", local_var_configuration.base_path, subAccountName=crate::apis::urlencode(sub_account_name), apiKey=crate::apis::urlencode(api_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteApiKeyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get list of API keys for a given sub-account. Requires sub-account owner authentication.
pub async fn get_api_key(configuration: &configuration::Configuration, params: GetApiKeyParams) -> Result<(), Error<GetApiKeyError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sub_account_name = params.sub_account_name;
    let authorization = params.authorization;
    let role = params.role;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api_keys/{subAccountName}", local_var_configuration.base_path, subAccountName=crate::apis::urlencode(sub_account_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = role {
        local_var_req_builder = local_var_req_builder.query(&[("role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GetApiKeyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

