/*
 * Foundry USA Pool API
 *
 * The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.
 *
 * The version of the OpenAPI document: 6.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_api_key`]
#[derive(Clone, Debug)]
pub struct CreateApiKeyParams {
    /// Name of sub-account.
    pub sub_account_name: String,
    /// OAuth2.0 access token.
    pub authorization: Option<String>,
    /// This can be any text you want under 100 characters. It's intended for describing who you'll be sharing the key with. Default value is \"default\".
    pub key_name: Option<String>,
    /// Valid values are \"technician\" (permission to view hashrate and workers) and \"accountant\" (permission to view hashrate, workers, and financial data). Default value is \"technician\".
    pub role: Option<String>,
}

/// struct for passing parameters to the method [`delete_api_key`]
#[derive(Clone, Debug)]
pub struct DeleteApiKeyParams {
    /// Name of sub-account.
    pub sub_account_name: String,
    /// API key to delete.
    pub api_key: String,
    /// OAuth2.0 access token.
    pub authorization: Option<String>,
}

/// struct for passing parameters to the method [`get_api_key`]
#[derive(Clone, Debug)]
pub struct GetApiKeyParams {
    /// Name of sub-account.
    pub sub_account_name: String,
    /// OAuth2.0 access token.
    pub authorization: Option<String>,
    /// Valid values are \"technician\" (permission to view hashrate and workers) and \"accountant\" (permission to view hashrate, workers, and financial data). Default value is \"technician\".
    pub role: Option<String>,
}

/// struct for typed errors of method [`create_api_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateApiKeyError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_api_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteApiKeyError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_api_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetApiKeyError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// Create API key for a given sub-account with given role. Requires sub-account owner authentication.
pub async fn create_api_key(
    configuration: &configuration::Configuration,
    params: CreateApiKeyParams,
) -> Result<(), Error<CreateApiKeyError>> {
    let uri_str = format!(
        "{}/api_keys/{subAccountName}",
        configuration.base_path,
        subAccountName = crate::apis::urlencode(params.sub_account_name)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = params.key_name {
        req_builder = req_builder.query(&[("keyName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.role {
        req_builder = req_builder.query(&[("role", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateApiKeyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete an API key for a given sub-account. Requires permission to view hashrate.
pub async fn delete_api_key(
    configuration: &configuration::Configuration,
    params: DeleteApiKeyParams,
) -> Result<(), Error<DeleteApiKeyError>> {
    let uri_str = format!(
        "{}/api_keys/{subAccountName}/{apiKey}",
        configuration.base_path,
        subAccountName = crate::apis::urlencode(params.sub_account_name),
        apiKey = crate::apis::urlencode(params.api_key)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteApiKeyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get list of API keys for a given sub-account and role. If role is \"technician\", requires permission to view hashrate. If role is \"accountant\", requires permission to view payments.
pub async fn get_api_key(
    configuration: &configuration::Configuration,
    params: GetApiKeyParams,
) -> Result<(), Error<GetApiKeyError>> {
    let uri_str = format!(
        "{}/api_keys/{subAccountName}",
        configuration.base_path,
        subAccountName = crate::apis::urlencode(params.sub_account_name)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.role {
        req_builder = req_builder.query(&[("role", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<GetApiKeyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
