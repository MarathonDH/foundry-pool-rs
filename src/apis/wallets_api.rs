/*
 * Foundry USA Pool API
 *
 * The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`add_withdrawal_address`]
#[derive(Clone, Debug)]
pub struct AddWithdrawalAddressParams {
    /// OAuth2.0 access token.
    pub authorization: String,
    /// Name of sub-account to which the new address is being added
    pub sub_account_name: String,
    /// Label for the address to be added
    pub address_label: String,
    /// Address to be added
    pub wallet_address: String,
    /// Name of requested coin. Default value is BTC
    pub coin: Option<String>
}

/// struct for passing parameters to the method [`get_auto_withdrawal_address`]
#[derive(Clone, Debug)]
pub struct GetAutoWithdrawalAddressParams {
    /// Name of the sub-account you want to get auto-withdrawal address for
    pub sub_account_name: String,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>,
    /// Name of requested coin.
    pub coin: Option<String>
}

/// struct for passing parameters to the method [`get_withdrawal_addresses`]
#[derive(Clone, Debug)]
pub struct GetWithdrawalAddressesParams {
    /// Name of the sub-account you want to get withdrawal addresses for
    pub sub_account_name: String,
    /// OAuth2.0 access token. Not required if using API key.
    pub authorization: Option<String>,
    /// API key. Not required if using access token.
    pub x_api_key: Option<String>,
    /// Name of requested coin.
    pub coin: Option<String>
}

/// struct for passing parameters to the method [`save_auto_withdrawal_details`]
#[derive(Clone, Debug)]
pub struct SaveAutoWithdrawalDetailsParams {
    /// OAuth2.0 access token.
    pub authorization: String,
    /// Name of subAccount.
    pub sub_account_name: String,
    /// Name of requested coin.
    pub coin_string: String,
    /// A list of wallet allocation requests. Each allocation request must contain following fields
    pub wallet_allocation_request: Vec<models::WalletAllocationRequest>
}

/// struct for passing parameters to the method [`set_auto_withdrawal_off`]
#[derive(Clone, Debug)]
pub struct SetAutoWithdrawalOffParams {
    /// OAuth2.0 access token.
    pub authorization: String,
    /// Name of the sub-account you want to deactivate auto-withdrawal for
    pub sub_account_name: String,
    /// Name of requested coin. Default value is BTC
    pub coin: Option<String>
}


/// struct for typed errors of method [`add_withdrawal_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddWithdrawalAddressError {
    Status400(),
    Status403(),
    Status409(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_auto_withdrawal_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAutoWithdrawalAddressError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_withdrawal_addresses`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWithdrawalAddressesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`save_auto_withdrawal_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SaveAutoWithdrawalDetailsError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_auto_withdrawal_off`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetAutoWithdrawalOffError {
    UnknownValue(serde_json::Value),
}


/// Add a new withdrawal address for a sub-account, if your group doesn't satisfy the approval request creation threshold. Else, create an approval request to do the same. Requires authorized user.
pub async fn add_withdrawal_address(configuration: &configuration::Configuration, params: AddWithdrawalAddressParams) -> Result<models::WalletResponse, Error<AddWithdrawalAddressError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let authorization = params.authorization;
    let sub_account_name = params.sub_account_name;
    let address_label = params.address_label;
    let wallet_address = params.wallet_address;
    let coin = params.coin;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/wallets/addresses/{subAccountName}/{addressLabel}/{walletAddress}", local_var_configuration.base_path, subAccountName=crate::apis::urlencode(sub_account_name), addressLabel=crate::apis::urlencode(address_label), walletAddress=crate::apis::urlencode(wallet_address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = coin {
        local_var_req_builder = local_var_req_builder.query(&[("coin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("Authorization", authorization.to_string());

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddWithdrawalAddressError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get addresses for a sub-account where auto-withdraw is enabled. Requires viewPayments permissions for this sub account.
pub async fn get_auto_withdrawal_address(configuration: &configuration::Configuration, params: GetAutoWithdrawalAddressParams) -> Result<models::WalletsResponse, Error<GetAutoWithdrawalAddressError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sub_account_name = params.sub_account_name;
    let authorization = params.authorization;
    let x_api_key = params.x_api_key;
    let coin = params.coin;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/wallets/autoWithdrawalAddress/{subAccountName}", local_var_configuration.base_path, subAccountName=crate::apis::urlencode(sub_account_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = coin {
        local_var_req_builder = local_var_req_builder.query(&[("coin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_api_key {
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAutoWithdrawalAddressError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get addresses for a sub-account. This includes addresses where auto-withdraw is either enabled or disabled. Requires viewPayments permissions for this sub account.
pub async fn get_withdrawal_addresses(configuration: &configuration::Configuration, params: GetWithdrawalAddressesParams) -> Result<models::WalletsResponse, Error<GetWithdrawalAddressesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sub_account_name = params.sub_account_name;
    let authorization = params.authorization;
    let x_api_key = params.x_api_key;
    let coin = params.coin;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/wallets/addresses/{subAccountName}", local_var_configuration.base_path, subAccountName=crate::apis::urlencode(sub_account_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = coin {
        local_var_req_builder = local_var_req_builder.query(&[("coin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_api_key {
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetWithdrawalAddressesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Save auto-withdrawal details for a sub-account. Requires authorized user. Addresses in the request should already be added.
pub async fn save_auto_withdrawal_details(configuration: &configuration::Configuration, params: SaveAutoWithdrawalDetailsParams) -> Result<i32, Error<SaveAutoWithdrawalDetailsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let authorization = params.authorization;
    let sub_account_name = params.sub_account_name;
    let coin_string = params.coin_string;
    let wallet_allocation_request = params.wallet_allocation_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/wallets/saveAutoWithdrawalDetails/{subAccountName}/{coinString}", local_var_configuration.base_path, subAccountName=crate::apis::urlencode(sub_account_name), coinString=crate::apis::urlencode(coin_string));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("Authorization", authorization.to_string());
    local_var_req_builder = local_var_req_builder.json(&wallet_allocation_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SaveAutoWithdrawalDetailsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set auto-withdrawal off for a sub-account. Requires withdraw permissions for the sub-account.
pub async fn set_auto_withdrawal_off(configuration: &configuration::Configuration, params: SetAutoWithdrawalOffParams) -> Result<i32, Error<SetAutoWithdrawalOffError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let authorization = params.authorization;
    let sub_account_name = params.sub_account_name;
    let coin = params.coin;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/wallets/deactivateAutoWithdrawal/{subAccountName}", local_var_configuration.base_path, subAccountName=crate::apis::urlencode(sub_account_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = coin {
        local_var_req_builder = local_var_req_builder.query(&[("coin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("Authorization", authorization.to_string());

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetAutoWithdrawalOffError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

