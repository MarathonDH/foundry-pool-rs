{
  "openapi": "3.0.1",
  "info": {
    "title": "Foundry USA Pool API",
    "description": "The Foundry USA Pool API allows users to view data and perform actions using custom written software. To get started, please follow the instructions in the Authentication Test endpoint.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://api.foundryusapool.com",
      "description": "Generated server url"
    }
  ],
  "tags": [
    { "name": "Authentication" },
    { "name": "Access Token" },
    { "name": "Activity Logs" },
    { "name": "Alerts" },
    { "name": "Approvals" },
    { "name": "Coins" },
    { "name": "Financial" },
    { "name": "Pool" },
    { "name": "Sub-Account" },
    { "name": "Sub-Account Settings" },
    { "name": "Sub-Accounts" },
    { "name": "User" },
    { "name": "Wallets" },
    { "name": "Workers" }
  ],
  "paths": {
    "/wallets/deactivateAutoWithdrawal/{subAccountName}": {
      "put": {
        "tags": ["Wallets"],
        "summary": "Deactivate Auto-Withdrawal",
        "description": "Set auto-withdrawal off for a sub-account. Requires withdraw permissions for the sub-account.",
        "operationId": "setAutoWithdrawalOff",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of the sub-account you want to deactivate auto-withdrawal for",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          }
        ],
        "responses": {
          "200": {
            "description": "The number of addresses turned off is returned",
            "content": {
              "*/*": {
                "schema": { "type": "integer", "format": "int32" },
                "example": 1
              }
            }
          }
        }
      }
    },
    "/wallets/addresses/{subAccountName}/{addressLabel}/{walletAddress}": {
      "put": {
        "tags": ["Wallets"],
        "summary": "Add a New Withdrawal Address or Create Approval Request for the same",
        "description": "Add a new withdrawal address for a sub-account, if your group doesn't satisfy the approval request creation threshold. Else, create an approval request to do the same. Requires authorized user.",
        "operationId": "addWithdrawalAddress",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of sub-account to which the new address is being added",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "addressLabel",
            "in": "path",
            "description": "Label for the address to be added",
            "required": true,
            "schema": { "type": "string" },
            "example": "address1"
          },
          {
            "name": "walletAddress",
            "in": "path",
            "description": "Address to be added",
            "required": true,
            "schema": { "type": "string" },
            "example": "15KTHoT6oMvB5ApXToDmGiesaqvKUJUhGo"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          }
        ],
        "responses": {
          "200": {
            "description": "Address added successfully and wallet info is returned",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WalletResponse" }
              }
            }
          },
          "400": { "description": "Bad Request: Invalid address format." },
          "403": {
            "description": "Forbidden: Coin address Address is restricted."
          },
          "409": {
            "description": "Conflict: Specified address already exists, An address with specified name already exists."
          }
        }
      }
    },
    "/v2/users/{userId}/group/{groupId}/role/{newSubAccountRoleName}": {
      "put": {
        "tags": ["User"],
        "summary": "Update User’s Role for All Sub-Accounts or Create Approval Request for the same",
        "description": "Update user’s role for all sub-accounts, if your group doesn't satisfy the approval request creation threshold. Else, create an approval request to do the same. Requires mining account owner authentication.",
        "operationId": "updateAllUserSubAccountRoles",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "String" },
            "example": "Bearer [access token]"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "example": 1
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "example": 1
          },
          {
            "name": "newSubAccountRoleName",
            "in": "path",
            "description": "Sub-Account Role Name, valid values are \"owner\", \"technician\", \"accountant\" or \"approver\".",
            "required": true,
            "schema": { "type": "String" },
            "example": "approver"
          }
        ],
        "responses": {
          "200": {
            "description": "User's role for all sub-accounts updated successfully and the UserResponse of the updated user is returned.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponseV2" }
              }
            }
          },
          "400": {
            "description": "Bad Request: Admin's access cannot be updated or deactivated. | User Sub Account Role with specified name does not exist"
          },
          "403": {
            "description": "Forbidden: Requires mining account owner or higher."
          },
          "404": {
            "description": "Not Found: User or Group not found | User not found in group"
          }
        }
      }
    },
    "/users/{userId}/sub-account_role/{subAccountName}": {
      "put": {
        "tags": ["User"],
        "summary": "Add User to an Existing Sub-Account",
        "description": "Add user to an existing sub-account. Requires admin write or owner permissions for the sub-account.",
        "operationId": "addSubAccountUser",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "String" },
            "example": "Bearer [access token]"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID to be added to sub-account",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "example": 1
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-Account name the user is to be added",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          }
        ],
        "requestBody": {
          "description": "Sub-Account role to be provided to this user. Valid values are \"owner\", \"technician\", \"accountant\" or \"approver\".  Optional - Will default to user's defaultSubAccountRole if not included.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserToSubAccountRequest"
              },
              "example": { "userRoleName": "technician" }
            }
          }
        },
        "responses": {
          "200": { "description": "User added to sub-account" },
          "403": {
            "description": "Forbidden: User is inactive. or already exists in the subaccount provided"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete User’s Role for a Sub-Account",
        "description": "Delete user’s role for a sub-account. Requires set role permissions for the sub-account.",
        "operationId": "deleteUserSubAccountRole",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "String" },
            "example": "Bearer [access token]"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID associated with the role to be deleted",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "example": 1
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-Account name the user's role is to be deleted from",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          }
        ],
        "responses": {
          "204": {
            "description": "User's role for a sub-account deleted successfully."
          },
          "400": {
            "description": "Bad Request: Group owner's access can not be modified or deleted OR Deactivated user's access can not be modified or deleted."
          }
        }
      }
    },
    "/users/{userId}/sub-account_role/{subAccountName}/{subAccountRoleName}": {
      "put": {
        "tags": ["User"],
        "summary": "Update User’s Role for a Sub-Account",
        "description": "Update user’s role for a sub-account. Requires set role permissions for the sub-account.",
        "operationId": "updateUserSubAccountRole",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "String" },
            "example": "Bearer [access token]"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "example": 1
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "The name of the sub-account",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "subAccountRoleName",
            "in": "path",
            "description": "Sub-Account Role Name, valid values are \"owner\", \"technician\", \"accountant\" or \"approver\".",
            "required": true,
            "schema": { "type": "string" },
            "example": "technician"
          }
        ],
        "responses": {
          "200": {
            "description": "User's role for a sub-account updated successfully and the ID of the updated user is returned.",
            "content": {
              "*/*": {
                "schema": { "type": "integer", "format": "int32" },
                "example": 1
              }
            }
          },
          "400": {
            "description": "Bad Request: Group owner's access can not be modified or deleted OR Deactivated user's access can not be modified or deleted."
          }
        }
      }
    },
    "/tags/{coinString}/{subAccountName}/{tagName}": {
      "put": {
        "tags": ["Workers"],
        "summary": "Create Tag",
        "description": "Create a tag. Requires permission to edit workers.",
        "operationId": "createTag",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin string. valid values are \"BTC\" or \"BCH\"",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-account name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "Tag name",
            "required": true,
            "schema": { "type": "string" },
            "example": "datacenter1"
          }
        ],
        "responses": {
          "201": {
            "description": "ID of created tag is returned",
            "content": {
              "*/*": {
                "schema": { "type": "integer", "format": "int32" },
                "example": 1
              }
            }
          },
          "409": { "description": "Tag with specified name already exists" },
          "400": {
            "description": "Specify a name other than 'all' and 'untagged'"
          }
        }
      },
      "delete": {
        "tags": ["Workers"],
        "summary": "Delete Tag",
        "description": "Delete a tag. Deleting will untag all the workers under the specified tag. Requires permission to edit workers.",
        "operationId": "deleteTag",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin string. valid values are \"BTC\" or \"BCH\"",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-account name associated with the tag",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "Tag name to be deleted",
            "required": true,
            "schema": { "type": "string" },
            "example": "datacenter1"
          }
        ],
        "responses": { "204": { "description": "No Content" } }
      }
    },
    "/tags/update/{coinString}/{subAccountName}/{tagName}/{newTagName}": {
      "put": {
        "tags": ["Workers"],
        "summary": "Update Tag Name",
        "description": "Update a tag name. Requires permission to edit workers.",
        "operationId": "updateTag",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin string. valid values are \"BTC\" or \"BCH\"",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-account name associated with the tag",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "Tag name to be updated",
            "required": true,
            "schema": { "type": "string" },
            "example": "datacenter1"
          },
          {
            "name": "newTagName",
            "in": "path",
            "description": "New tag name",
            "required": true,
            "schema": { "type": "string" },
            "example": "datacenter2"
          }
        ],
        "responses": {
          "201": {
            "description": "ID of updated tag is returned",
            "content": {
              "*/*": {
                "schema": { "type": "integer", "format": "int32" },
                "example": 1
              }
            }
          },
          "409": {
            "description": "Conflict: Tag with new name already exists."
          },
          "400": {
            "description": "Bad Request: Tag with specified name does not exist."
          }
        }
      }
    },
    "/tags/tag/{coinString}/{subAccountName}/{tagName}": {
      "put": {
        "tags": ["Workers"],
        "summary": "Tag Workers",
        "description": "Tag a list of workers. Requires permission to edit workers.",
        "operationId": "tagWorkers",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin string. valid values are \"BTC\" or \"BCH\"",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-account name associated with the tag",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "Tag name",
            "required": true,
            "schema": { "type": "string" },
            "example": "datacenter1"
          }
        ],
        "requestBody": {
          "description": "List of worker ids to be tagged",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "integer", "format": "int32" }
              },
              "example": [1, 2, 3, 4, 5]
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns Number of successful tagged",
            "content": {
              "*/*": {
                "schema": { "type": "integer", "format": "int32" },
                "example": 5
              }
            }
          },
          "403": {
            "description": "Forbidden: Requester doesn't have Worker Edit permission."
          }
        }
      }
    },
    "/api_keys/{subAccountName}": {
      "get": {
        "tags": ["Sub-Account Settings"],
        "summary": "Get API keys",
        "description": "Get list of API keys for a given sub-account. Requires sub-account owner authentication.",
        "operationId": "getApiKey",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of sub-account.",
            "required": true,
            "schema": { "type": "string" },
            "example": "subAccount1"
          },
          {
            "name": "role",
            "in": "query",
            "description": "Valid values are \"technician\" (permission to view hashrate and workers) and \"accountant\" (permission to view hashrate, workers, and financial data). Default value is \"technician\".",
            "required": false,
            "schema": { "type": "string", "default": "technician" },
            "example": "technician"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": [
                  {
                    "X-API-KEY": "123e4567-e89b-12d3-a456-426614174000",
                    "name": "satoshi"
                  },
                  {
                    "X-API-KEY": "463dc6d6-54d5-4d33-8fc9-f94ff67b2a53",
                    "name": "nakamoto"
                  }
                ]
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Sub-Account Settings"],
        "summary": "Create API key",
        "description": "Create API key for a given sub-account. Requires sub-account owner authentication.",
        "operationId": "createApiKey",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of sub-account.",
            "required": true,
            "schema": { "type": "string" },
            "example": "subAccount1"
          },
          {
            "name": "keyName",
            "in": "query",
            "description": "This can be any text you want under 100 characters. It's intended for describing who you'll be sharing the key with. Default value is \"default\".",
            "required": false,
            "schema": { "type": "string", "default": "default" },
            "example": "default"
          },
          {
            "name": "role",
            "in": "query",
            "description": "Valid values are \"technician\" (permission to view hashrate and workers) and \"accountant\" (permission to view hashrate, workers, and financial data). Default value is \"technician\".",
            "required": false,
            "schema": { "type": "string", "default": "technician" },
            "example": "technician"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "X-API-KEY": "123e4567-e89b-12d3-a456-426614174000"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/tagAlerts/{coinString}/{subAccountName}/{tagName}": {
      "put": {
        "tags": ["Alerts"],
        "summary": "Create Alert For A Tag",
        "description": "Creates an alert for a specified tag. ID of created alert is returned. Note: You can also add an alert for All workers by supplying tagName value as 'all'. Requires permission to edit workers.",
        "operationId": "createTagAlert",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub Account Name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "Tag Name",
            "required": true,
            "schema": { "type": "string" },
            "example": "datacenter1"
          },
          {
            "name": "hashrateThreshold",
            "in": "query",
            "description": "Hashrate threshold for the alert in GH/s.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": 0 },
            "example": 100
          },
          {
            "name": "activeWorkersThreshold",
            "in": "query",
            "description": "Active Workers threshold for the alert.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 },
            "example": 10
          }
        ],
        "requestBody": {
          "description": "List of email addresses to be notified when the alert is triggered.",
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "type": "string" } },
              "example": ["abc@aaa", "def@aaa"]
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created, ID of alert is returned",
            "content": {
              "*/*": {
                "schema": { "type": "integer", "format": "int32" },
                "example": 1
              }
            }
          },
          "400": {
            "description": "Bad Request: Tag not found, Specify either hashrate threshold or active workers threshold or both, Specify at least one email recipient for the alert, At least one of the emails is invalid."
          }
        }
      }
    },
    "/alerts/addEmail/{coinString}/{subAccountName}/{alertId}/{emailAddress}": {
      "put": {
        "tags": ["Alerts"],
        "summary": "Add Email To Alert",
        "description": "Add an email address to existing alert. Requires permission to edit workers.",
        "operationId": "addEmailToAlert",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub Account Name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "alertId",
            "in": "path",
            "description": "Alert ID",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "example": 1
          },
          {
            "name": "emailAddress",
            "in": "path",
            "description": "Email Address to be added to the alert.",
            "required": true,
            "schema": { "type": "string" },
            "example": "abc@aaa.com"
          }
        ],
        "responses": {
          "201": {
            "description": "Created, ID of email_alert is returned",
            "content": {
              "*/*": {
                "schema": { "type": "integer", "format": "int32" },
                "example": 1
              }
            }
          },
          "400": {
            "description": "Bad Request: Alert does not exist, Email address is invalid, This email is already configured to receive this alert."
          }
        }
      }
    },
    "/wallets/saveAutoWithdrawalDetails/{subAccountName}/{coinString}": {
      "post": {
        "tags": ["Wallets"],
        "summary": "Save Auto-Withdrawal Details",
        "description": "Save auto-withdrawal details for a sub-account. Requires authorized user. Addresses in the request should already be added.",
        "operationId": "saveAutoWithdrawalDetails",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of subAccount.",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Name of requested coin.",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          }
        ],
        "requestBody": {
          "description": "A list of wallet allocation requests. Each allocation request must contain following fields",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WalletAllocationRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The number of addresses updated is returned",
            "content": {
              "*/*": {
                "schema": { "type": "integer", "format": "int32" },
                "example": 1
              }
            }
          },
          "400": {
            "description": "Bad Request: Total Allocation must be 100 percent, At least one of the wallet addresses is not already added"
          }
        }
      }
    },
    "/v2/users": {
      "post": {
        "tags": ["User"],
        "summary": "Create User or Add User to group(s) or Create Approval Request for the same",
        "description": "Creates a user and adds it to the groups that don't satisfy the approval request creation threshold to it. Else, create an approval request to do the same. Requires mining account owner or admin write authentication.",
        "operationId": "register",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          }
        ],
        "requestBody": {
          "description": "User info that needs to be added to the group",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NewUserRequestV2" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "UserResponse of the registered user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponseV2" }
              }
            }
          },
          "400": {
            "description": "Bad Request: Specified email is invalid; API User with owner Role does not provide a list of IPs; IP format is invalid; User Sub Account Role with specified name does not exist;"
          },
          "403": {
            "description": "Forbidden: Insufficient privileges. Requires mining account owner or higher; User fullName is inactive; Access to the multi-group per user feature is not enabled."
          },
          "409": { "description": "Conflict: User with email already exists." }
        }
      }
    },
    "/v2/sub_account/{subAccountName}/group/{groupId}/{addressLabel}/{walletAddress}": {
      "post": {
        "tags": ["Sub-Account"],
        "summary": "Create Sub-Account for given Group and Add Withdrawal Address or Create Approval Request for the same.",
        "description": "Create a new sub-account for given group and add an initial withdrawal address to it, if your group doesn't satisfy the approval request creation threshold. Else, create an approval request to do the same. Requires sub-account owner authentication.",
        "operationId": "createSubAccountAndAddWithdrawalAddressForGroup",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of the new sub-account",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID for the group to which the sub-account belongs",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "example": 1
          },
          {
            "name": "addressLabel",
            "in": "path",
            "description": "Label for the new withdrawal address",
            "required": true,
            "schema": { "type": "string" },
            "example": "selfcustody"
          },
          {
            "name": "walletAddress",
            "in": "path",
            "description": "Withdrawal address",
            "required": true,
            "schema": { "type": "string" },
            "example": "15KTHoT6oMvB5ApXToDmGiesaqvKUJUhGo"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User ID for the owner of the new-subaccount. Default value is the user ID associated with your access token. Do not include this param if you're not an admin. Only admins with write permission can create sub-accounts on behalf of other users.",
            "required": false,
            "schema": { "type": "string", "default": "-1" },
            "example": 1
          }
        ],
        "requestBody": {
          "description": "An optional array specifying users and their sub-account role. All group owners must be present in the array. Each array entry must contain the following fields. userId: an Integer that corresponds to a User ID. subAccountRole: a String that represents the subAccountRole you want to be given to the User ID, Allowed values for subAccountRole are \"owner\", \"technician\" or \"accountant\"",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubAccountAccessRequest"
                }
              },
              "example": [{ "userId": 1, "subAccountRole": "owner" }]
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WalletResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid Address format for coin BTC/BCH | No user access specified in the request body | Please ensure that all the Group owners are specified in the accessRequest attribute of request body | Group owners cannot be granted any role other than owner | Request body incorrectly formatted. userId or/and subAccountRole is missing for a user access | Sub-account name must only contain lower-case alphanumeric characters"
          },
          "403": {
            "description": "Insufficient privileges. You do not have access to group Group Name | Insufficient privileges. Requires sub-account owner or higher. | Coin address is restricted. | The access to the multi-group per user feature is not enabled."
          },
          "404": {
            "description": "User with userId 'User ID' not found in a group with groupId Group ID | Incorrect role specified for userId User ID"
          },
          "409": {
            "description": "Sub-account with name SubAccount Name already exists."
          }
        }
      }
    },
    "/approvals/{approvalRequestId}": {
      "post": {
        "tags": ["Approvals"],
        "summary": "Approve Or Reject An Approval Request",
        "description": "Approve or reject an approval request. Requires approver permissions.",
        "operationId": "approvalAction",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "approvalRequestId",
            "in": "path",
            "description": "Approval request ID",
            "required": true,
            "schema": { "type": "string" },
            "example": 123
          }
        ],
        "requestBody": {
          "description": "Accepted values are \"approve\" or \"reject\"",
          "content": {
            "application/json": {
              "schema": { "type": "object" },
              "example": { "action": "approve" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK: Response varies based on type of approval request. For \"add address\" type, returns a wallet response if approving the request. See \"Get withdrawal addresses\" section for an example. Returns an empty response if rejecting the request."
          },
          "400": {
            "description": "Bad Request: Invalid approvalRequestId, invalid request body, invalid approval action."
          }
        }
      }
    },
    "/workers/{subAccountName}": {
      "get": {
        "tags": ["Workers"],
        "summary": "All Worker Stats",
        "description": "Get all worker stats for a sub-account. Requires permission to view hashrate.",
        "operationId": "getWorkersBySubAccount",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of requested sub-account.",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Valid values are \"highestHashrate\", \"lowestHashrate\", \"highestReject\", \"lowestReject\", \"newestShareTime\", \"oldestShareTime\", \"workerName\", \"reverseWorkerName\", \"tagName\", \"reverseTagName\". Default value is highestHashrate.",
            "required": false,
            "schema": { "type": "string", "default": "highestHashrate" },
            "example": "newestShareTime"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Valid values are \"all\", \"online<15min\", \"offline<24hr\", or \"offline>24hr\". Default value is all.",
            "required": false,
            "schema": { "type": "string", "default": "all" },
            "example": "offline>24hr"
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Valid values are \"all\", \"untagged\" or user created tag name. Default value is all.",
            "required": false,
            "schema": { "type": "string", "default": "all" },
            "example": "untagged"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Valid values are 0 and positive integers. Default value is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 },
            "example": 2
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Valid values are -1 (representing max size) and positive integers. Default value is -1.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": -1 },
            "example": 100
          },
          {
            "name": "workerNameSearchStr",
            "in": "query",
            "description": "Default value is \"\" and includes all worker names",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "worker1"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Worker stats are returned.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkersResponse" }
              }
            }
          }
        }
      }
    },
    "/workers/{subAccountName}/{workerName}": {
      "get": {
        "tags": ["Workers"],
        "summary": "Worker Stats",
        "description": "Get worker stats. Requires permission to view hashrate.",
        "operationId": "getWorkerBySubAccountAndWorkerName",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of requested sub-account.",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "workerName",
            "in": "path",
            "description": "Name of requested worker.",
            "required": true,
            "schema": { "type": "string" },
            "example": "worker1"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkerResponse" }
              }
            }
          }
        }
      }
    },
    "/workers/workerCounts/{subAccountName}": {
      "get": {
        "tags": ["Workers"],
        "summary": "Worker Counts by Tag Name",
        "description": "Get worker counts by tag name. Requires permission to view hashrate.",
        "operationId": "getWorkerCounts",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of requested sub-account.",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "tagName",
            "in": "query",
            "description": "Name of requested tag. Default value is \"all\".",
            "required": false,
            "schema": { "type": "string", "default": "all" },
            "example": "datacenter1"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, Worker counts are returned.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkerCounts" }
              }
            }
          },
          "403": {
            "description": "Forbidden: Requester doesn't have view hashrate permission."
          }
        }
      }
    },
    "/worker_hashrate_hour/{subAccountName}/{workerId}": {
      "get": {
        "tags": ["Workers"],
        "summary": "Worker Hashrate Per Hour",
        "description": "Get worker hashrate per hour for a requested date range & coin. Requires permission to view hashrate.",
        "operationId": "getWorkerHashrate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start date inclusive, in YYYY-MM-DD string format. Default value is one week ago.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2020-11-07"
          },
          {
            "name": "end",
            "in": "query",
            "description": "End date inclusive, in YYYY-MM-DD string format. Default value is current time.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2020-11-07"
          },
          {
            "name": "startDateUnixMs",
            "in": "query",
            "description": "Start date inclusive, in unix epoch time (milliseconds). Default value is one week ago.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": 0 },
            "example": 1604188800000
          },
          {
            "name": "endDateUnixMs",
            "in": "query",
            "description": "End date inclusive, in unix epoch time (milliseconds). Default value is current time.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": 0 },
            "example": 1604760159
          },
          {
            "name": "subAccountName",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "workerId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/HashrateResponse" }
                }
              }
            }
          }
        }
      }
    },
    "/worker_hashrate_day/{subAccountName}/{workerId}": {
      "get": {
        "tags": ["Workers"],
        "summary": "Worker Hashrate Per Day",
        "description": "Get worker hashrate per day for a requested date range & coin. Requires permission to view hashrate.",
        "operationId": "getWorkerHashrate_1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of requested sub-account.",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "workerId",
            "in": "path",
            "description": "ID of requested worker.",
            "required": true,
            "schema": { "type": "integer", "format": "int64" },
            "example": 1
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start date inclusive, in YYYY-MM-DD string format. Default value is 30 days ago.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2021-01-20"
          },
          {
            "name": "end",
            "in": "query",
            "description": "End date inclusive, in YYYY-MM-DD string format. Default value is current day.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2021-01-21"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/HashrateResponse" }
                }
              }
            }
          }
        }
      }
    },
    "/wallets/autoWithdrawalAddress/{subAccountName}": {
      "get": {
        "tags": ["Wallets"],
        "summary": "Get Enabled Auto-Withdrawal Addresses",
        "description": "Get addresses for a sub-account where auto-withdraw is enabled. Requires viewPayments permissions for this sub account.",
        "operationId": "getAutoWithdrawalAddress",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of the sub-account you want to get auto-withdrawal address for",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all auto-withdrawal addresses for the specified sub-account are returned",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WalletsResponse" }
              }
            }
          },
          "204": { "description": "No auto-withdrawal addresses found" }
        }
      }
    },
    "/wallets/addresses/{subAccountName}": {
      "get": {
        "tags": ["Wallets"],
        "summary": "Get Withdrawal Addresses",
        "description": "Get addresses for a sub-account. This includes addresses where auto-withdraw is either enabled or disabled. Requires viewPayments permissions for this sub account.",
        "operationId": "getWithdrawalAddresses",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of the sub-account you want to get withdrawal addresses for",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all withdrawal addresses for the specified sub-account are returned",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WalletsResponse" }
              }
            }
          }
        }
      }
    },
    "/v2/users/users-by-groups": {
      "get": {
        "tags": ["User"],
        "summary": "Get All Users Associated with a List of Groups",
        "description": "Get all users associated with a list of groups. Requires logged-in user to have access to, and view permissions for, all groups in list.",
        "operationId": "getUsersByGroupList",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "String" },
            "example": "Bearer [access token]"
          },
          {
            "name": "groupIdsList",
            "in": "query",
            "description": "Optional List of Group IDs.  If empty, returns all users in all groups the logged-in user has view permissions for.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int32" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupWithUsersResponseV2"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Null values present in a List; Duplicated group entry - {id};"
          },
          "403": {
            "description": "Forbidden: Insufficient privileges. Requires group-level approver or higher; access to the multi-group per user feature is not enabled."
          }
        }
      }
    },
    "/v2/activity_log": {
      "get": {
        "tags": ["Activity Logs"],
        "summary": "Get Activity Logs for a List of Groups",
        "description": "Get activity log for a list of groups. Mining account owner or accountant authentication required to see own groups activity log. Admin authentication with read permission required to see other groups activity log.",
        "operationId": "getActivityLogForGroups",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "groupIdsList",
            "in": "query",
            "description": "List of Group IDs is optional. If no list is passed, all groups the logged-in user has view permissions for is returned.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int32" }
            }
          },
          {
            "name": "startDateUnixMs",
            "in": "query",
            "description": "Start date inclusive, in unix epoch time (milliseconds). Default value is 30 days ago.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": -1 },
            "example": 1638585600000
          },
          {
            "name": "endDateUnixMs",
            "in": "query",
            "description": "End date inclusive, in unix epoch time (milliseconds). Default value is current time.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": -1 },
            "example": 1638585600000
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Valid values are 0 and positive integers.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 },
            "example": 3
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Valid values are -1 (representing max size) and positive integers.",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 100 },
            "example": 100
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Filter logs by coin.",
            "required": false,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "activityType",
            "in": "query",
            "description": "Filter logs by activity type. List of available activity types can be GET from /activity_log/activity_types endpoint",
            "required": false,
            "schema": { "type": "string" },
            "example": "DELETE_USER"
          },
          {
            "name": "userEmail",
            "in": "query",
            "description": "Filter logs by a user's email address",
            "required": false,
            "schema": { "type": "string" },
            "example": "satoshinakamoto@foundry.com"
          },
          {
            "name": "subAccountName",
            "in": "query",
            "description": "Filter logs by a subAccountName for a Group in which that SubAccount exists",
            "required": false,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the logs by \"newest\" or \"oldest\" case-sensitive.",
            "required": false,
            "schema": { "type": "string", "default": "newest" },
            "example": "newest"
          },
          {
            "name": "hideAuthLogs",
            "in": "query",
            "description": "Filter logs by hiding all auth0 activity types.",
            "required": false,
            "schema": { "type": "boolean" },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityLogResponseV2WithTotal"
                }
              }
            }
          }
        }
      }
    },
    "/users/logged-in-user": {
      "get": {
        "tags": ["User"],
        "summary": "Get User Info (Self)",
        "description": "Get info for user associated with the provided authentication token.",
        "operationId": "getUserByLoggedInUser",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "String" },
            "example": "Bearer [access token]"
          }
        ],
        "responses": {
          "200": {
            "description": "User info",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        }
      }
    },
    "/transactions/{subAccountName}": {
      "get": {
        "tags": ["Financial"],
        "summary": "Transactions",
        "description": "Get transactions for a requested sub-account. Requires authorized user or admin authentication.",
        "operationId": "getTransactions",
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-Account name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "startDateUnixMs",
            "in": "query",
            "description": "Start date inclusive, in unix epoch time (milliseconds). Default value is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": 0 },
            "example": 1604188800000
          },
          {
            "name": "endDateUnixMs",
            "in": "query",
            "description": "End date inclusive, in unix epoch time (milliseconds). Default value is current time.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": -1 },
            "example": 1604760159
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags/{coinString}/{subAccountName}": {
      "get": {
        "tags": ["Workers"],
        "summary": "Worker Tags",
        "description": "Get worker tags. Requires permission to view hashrate.",
        "operationId": "getTags",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin string. valid values are \"BTC\" or \"BCH\"",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-account name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of tags",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TagsResponse" }
              }
            }
          }
        }
      }
    },
    "/tags/taggedWorkerCount/{coinString}/{subAccountName}": {
      "get": {
        "tags": ["Workers"],
        "summary": "Get Tagged Worker Count",
        "description": "Get the number of workers tagged by sub-account id and coinstring. Requires permission to view hashrate.",
        "operationId": "getTaggedWorkerCount",
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-account name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin string. valid values are \"BTC\" or \"BCH\"",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Returns the number of workers tagged with the specified tag",
            "content": {
              "application/json": {
                "schema": { "type": "integer", "format": "int32" }
              }
            }
          },
          "403": {
            "description": "Forbidden: Requester doesn't have View Hashrate permission."
          }
        }
      }
    },
    "/subaccount_stats/{subAccountName}": {
      "get": {
        "tags": ["Sub-Account"],
        "summary": "Sub-Account Stats",
        "description": "Get sub-account stats. Requires permission to view hashrate.",
        "operationId": "getSubAccountStats",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-Account Name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "tagName",
            "in": "query",
            "description": "Name of requested tag. Default value is all.",
            "required": false,
            "schema": { "type": "string", "default": "all" },
            "example": "all"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubAccountStatsWithoutOwnersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subaccount_hashrate_hour/{subAccountName}": {
      "get": {
        "tags": ["Sub-Account"],
        "summary": "Hashrate Per Hour",
        "description": "Get sub-account hashrate per hour for a requested date range & coin. Requires permission to view hashrate.",
        "operationId": "getSubAccountHashrate",
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start date inclusive, in yyyy-MM-ddThh:mm:ss.SSS string format. Default value is one week ago.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2020-11-07T12:00:00.000"
          },
          {
            "name": "end",
            "in": "query",
            "description": "End date inclusive, in yyyy-MM-ddThh:mm:ss.SSS string format. Default value is current time.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2020-11-07T13:00:00.000"
          },
          {
            "name": "startDateUnixMs",
            "in": "query",
            "description": "Start date inclusive, in unix epoch time (milliseconds). Default value is one week ago.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": 0 },
            "example": 1604188800000
          },
          {
            "name": "endDateUnixMs",
            "in": "query",
            "description": "End date inclusive, in unix epoch time (milliseconds). Default value is current time.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": 0 },
            "example": 1604760159
          },
          {
            "name": "subAccountName",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/HashrateResponse" }
                }
              }
            }
          }
        }
      }
    },
    "/subaccount_hashrate_day/{subAccountName}": {
      "get": {
        "tags": ["Sub-Account"],
        "summary": "Hashrate Per Day",
        "description": "Get sub-account hashrate and average active workers per day for a requested date range & coin. Requires permission to view hashrate. Note: Average Workers would be -1.0 for the current UTC day and also if the calculation is pending.",
        "operationId": "getSubAccountHashrate_1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of requested sub-account.",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start date inclusive, in YYYY-MM-DD string format. Default value is 30 days ago.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2021-01-20"
          },
          {
            "name": "end",
            "in": "query",
            "description": "End date inclusive, in YYYY-MM-DD string format. Default value is current day.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2021-04-20"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/HashrateResponse" }
                }
              }
            }
          }
        }
      }
    },
    "/pool_stats": {
      "get": {
        "tags": ["Pool"],
        "summary": "Pool Stats",
        "description": "Get pool stats.  No authentication required.",
        "operationId": "getPoolStats",
        "parameters": [
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PoolStats" }
              }
            }
          }
        }
      }
    },
    "/pool_hashrate": {
      "get": {
        "tags": ["Pool"],
        "summary": "Pool Hashrate",
        "description": "Get pool hashrate (24 hour avg in GH/s). No authentication required.",
        "operationId": "getPoolHashrate",
        "parameters": [
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": { "schema": { "type": "string" }, "example": "1234567890" }
            }
          }
        }
      }
    },
    "/granted_subaccount_stats/{userId}": {
      "get": {
        "tags": ["Sub-Account"],
        "summary": "Granted Sub-Account Stats",
        "description": "Get stats for sub-accounts that the user owns or has granted access to. User authentication required to see their own granted sub-accounts. Admin authentication with read permission required to see other users granted sub-accounts.",
        "operationId": "getGrantedSubAccountStats",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID is optional. Defaults to logged in user.",
            "required": true,
            "schema": { "type": "string" },
            "example": 1
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Valid values are \"highestHashrate\" or \"subAccountName\".",
            "required": false,
            "schema": { "type": "string", "default": "subAccountName" },
            "example": "highestHashrate"
          },
          {
            "name": "groupIdsList",
            "in": "query",
            "description": "List of group ids.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int32" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubAccountStatsWithRoleResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get_role/{subAccountName}/{userId}": {
      "get": {
        "tags": ["User"],
        "summary": "Get a Users Role for a Sub-Account",
        "description": "Get the role of a user for a sub-account.",
        "operationId": "getRoleInfoBySubAccountNameAndUserId",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "The name of the sub-account",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user is optional. Defaults to logged in user.",
            "required": true,
            "schema": { "type": "string" },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Returns the role of the user for the sub-account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubAccountRoleResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: No userSubAccountRole entry present with userId and sub-account"
          }
        }
      }
    },
    "/financial_overview/{userId}": {
      "get": {
        "tags": ["Financial"],
        "summary": "Financial Overview",
        "description": "Get financial stats and their total for sub-accounts associated with a user. User authentication required to see their own granted sub-accounts. Admin authentication with read permission required to see other users granted sub-accounts.",
        "operationId": "getFinancialStatsForSubAccounts",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID is optional. Defaults to logged in user",
            "required": true,
            "schema": { "type": "string" },
            "example": 123
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "startDateUnixMs",
            "in": "query",
            "description": "Start date inclusive, in unix epoch time (milliseconds). Default value is 0. Specify UTC start of the day epoch time.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": 0 },
            "example": 1621305600000
          },
          {
            "name": "endDateUnixMs",
            "in": "query",
            "description": "End date inclusive, in unix epoch time (milliseconds). Default value is current time.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": -1 },
            "example": 1621392000000
          },
          {
            "name": "groupIdsList",
            "in": "query",
            "description": "List of group ids.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int32" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubAccountsFinancialStatsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/earnings/{subAccountName}": {
      "get": {
        "tags": ["Financial"],
        "summary": "Daily Earnings",
        "description": "Get daily aggregated earnings for a requested sub-account. Requires authorized user or admin authentication.",
        "operationId": "getEarnings",
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-Account name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "startDateUnixMs",
            "in": "query",
            "description": "Start date inclusive, in unix epoch time (milliseconds). Default value is 0.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": 0 },
            "example": 1604188800000
          },
          {
            "name": "endDateUnixMs",
            "in": "query",
            "description": "End date inclusive, in unix epoch time (milliseconds). Default value is current time.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": -1 },
            "example": 1604760159
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/EarningResponse" }
                }
              }
            }
          }
        }
      }
    },
    "/cumulated_subaccount_hashrate_hour/{userId}": {
      "get": {
        "tags": ["Sub-Accounts"],
        "summary": "Cumulated Hashrate Per Hour for Granted Sub-Accounts",
        "description": "Get cumulative hashrate per hour for all granted sub-accounts that the user owns or has been granted access to, for a requested date range & coin. User authentication required to see their own granted sub-accounts. Admin authentication with read permission required to see other users granted sub-accounts.",
        "operationId": "getCumulativeGrantedSubAccountsHashrate",
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID argument is optional. Defaults to logged in user",
            "required": true,
            "schema": { "type": "string" },
            "example": 1
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start date inclusive, in YYYY-MM-DD string format. Default value is one week ago.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2020-11-07"
          },
          {
            "name": "end",
            "in": "query",
            "description": "End date inclusive, in YYYY-MM-DD string format. Default value is current time.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2020-11-08"
          },
          {
            "name": "startDateUnixMs",
            "in": "query",
            "description": "Start date inclusive, in unix epoch time (milliseconds). Default value is one week ago.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": 0 },
            "example": 1604188800000
          },
          {
            "name": "endDateUnixMs",
            "in": "query",
            "description": "End date inclusive, in unix epoch time (milliseconds). Default value is current time.",
            "required": false,
            "schema": { "type": "integer", "format": "int64", "default": 0 },
            "example": 1604760159
          },
          {
            "name": "groupIdsList",
            "in": "query",
            "description": "Optional list of group IDs to filter by.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int32" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/HashrateResponse" }
                }
              }
            }
          }
        }
      }
    },
    "/cumulated_subaccount_hashrate_day/{userId}": {
      "get": {
        "tags": ["Sub-Accounts"],
        "summary": "Cumulated Hashrate Per Day for Granted Sub-Accounts",
        "description": "Get cumulative hashrate per day for all granted sub-accounts that the user owns or has been granted access to, for a requested date range & coin. User authentication required to see their own granted sub-accounts. Admin authentication with read permission required to see other users granted sub-accounts.",
        "operationId": "getCumulativeGrantedSubAccountsHashrate_1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID argument is optional. Defaults to logged in user",
            "required": true,
            "schema": { "type": "string" },
            "example": 1
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start date inclusive, in YYYY-MM-DD string format. Default value is 30 days ago.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2021-01-20"
          },
          {
            "name": "end",
            "in": "query",
            "description": "End date inclusive, in YYYY-MM-DD string format. Default value is current day.",
            "required": false,
            "schema": { "type": "string", "default": "" },
            "example": "2021-04-20"
          },
          {
            "name": "groupIdsList",
            "in": "query",
            "description": "Optional list of group IDs to filter by.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int32" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/HashrateResponse" }
                }
              }
            }
          }
        }
      }
    },
    "/cumulated_granted_subaccount_stats/{userId}": {
      "get": {
        "tags": ["Sub-Accounts"],
        "summary": "Cumulated Granted Sub-Account Stats",
        "description": "Get cumulated stats for sub-accounts that the user owns or has granted access to. User authentication required to see their own granted sub-accounts. Admin authentication with read permission required to see other users granted sub-accounts.",
        "operationId": "getCumulativeGrantedSubAccountStats",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID argument is optional. Defaults to logged in user",
            "required": true,
            "schema": { "type": "string" },
            "example": 1
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Valid values are \"highestHashrate\" or \"subAccountName\".",
            "required": false,
            "schema": { "type": "string", "default": "subAccountName" },
            "example": "highestHashrate"
          },
          {
            "name": "groupIdsList",
            "in": "query",
            "description": "Optional list of group IDs to filter by.",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int32" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CumulativeSubAccountStats"
                }
              }
            }
          }
        }
      }
    },
    "/coins": {
      "get": {
        "tags": ["Coins"],
        "summary": "List Supported Coins",
        "description": "Get list of coins on the pool. No authentication required.",
        "operationId": "getCoins",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "type": "string" } }
              }
            }
          }
        }
      }
    },
    "/balance/{subAccountName}": {
      "get": {
        "tags": ["Financial"],
        "summary": "Balance Info",
        "description": "Get balance, total earned, total fees and total withdrawn amount for a requested sub-account. Requires authorized user or admin authentication.",
        "operationId": "getBalanceInfo",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-Account name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Name of requested coin. Default value is BTC.",
            "required": false,
            "schema": { "type": "string", "default": "BTC" },
            "example": "BTC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BalanceResponse" }
              }
            }
          }
        }
      }
    },
    "/authentication_test": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Authentication Test",
        "description": "Please follow these instructions for all endpoints that require authentication. You may generate an API key by creating a \"Viewer Link\" in the pool Sub-Accounts page. Use either an API key or access token (not both) to authenticate. API Keys are intended for pool customers while access tokens are intended for internal use.",
        "operationId": "authenticationTest",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        ],
        "responses": {
          "200": {
            "description": "OK, Your role is returned",
            "content": {
              "*/*": {
                "schema": { "type": "string" },
                "example": "Authentication with API key succeeded. Your role is Viewer."
              }
            }
          },
          "403": { "description": "Not Authenticated" }
        }
      }
    },
    "/alerts/tagAlerts/{coinString}/{subAccountName}": {
      "get": {
        "tags": ["Alerts"],
        "summary": "Get Tag Alerts",
        "description": "Get alerts configured for worker tags. Requires permission to view hashrate.",
        "operationId": "getTagAlerts",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub Account Name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TagAlertsResponse" }
              }
            }
          }
        }
      }
    },
    "/activity_log/activity_types": {
      "get": {
        "tags": ["Activity Logs"],
        "summary": "Get Available Activity Log Types",
        "description": "Get list of activities types that are currently being logged by the pool.",
        "operationId": "getActivityLogTypes",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available activity types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityTypesEnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/access_token": {
      "get": {
        "tags": ["Access Token"],
        "summary": "Get Access Token",
        "description": "Returns the access token for a specific user. Requires API User permission.",
        "operationId": "getAccessToken",
        "parameters": [
          {
            "name": "Email-Address",
            "in": "header",
            "description": "Email address of the user",
            "required": true,
            "schema": { "type": "string" },
            "example": "satoshinakamoto@foundry.com"
          },
          {
            "name": "Password",
            "in": "header",
            "description": "Password of the user",
            "required": true,
            "schema": { "type": "string" },
            "example": "password123"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Authenticated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessToken" }
              }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "User Not Found" }
        }
      }
    },
    "/workers/{subAccountName}/{coinString}": {
      "delete": {
        "tags": ["Workers"],
        "summary": "Delete Workers",
        "description": "Delete workers for a sub-account by providing a list of worker ids OR by providing a last share time timestamp in milliseconds. Requires sub-account owner authentication.",
        "operationId": "deleteWorkersBySubAccountNameAndWorkerIds",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of requested sub-account.",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Name of requested coin.",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "lastShareTime",
            "in": "query",
            "description": "Timestamp in Unix milliseconds. Must be at least 15 minutes before current time. Workers whose last share time is equal to or older than this timestamp will be deleted.",
            "required": false,
            "schema": { "type": "integer", "format": "int64" },
            "example": 1622714400000
          }
        ],
        "requestBody": {
          "description": "Optional list of worker ids to be deleted.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "integer", "format": "int64" }
              },
              "example": [1, 2, 3]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, Returns Number of workers deleted.",
            "content": {
              "*/*": {
                "schema": { "type": "integer", "format": "int32" },
                "example": 3
              }
            }
          },
          "403": {
            "description": "Forbidden: Requester doesn't have Worker Edit permission."
          }
        }
      }
    },
    "/v2/users/{userId}": {
      "delete": {
        "tags": ["User"],
        "summary": "Deactivate User Associated With a List of Groups or Create Approval Request for the same",
        "description": "Deactivate user associated with a list of groups or Create Approval Request to do so. Requires mining account owner authentication or admin write authentication.",
        "operationId": "deactivateUser",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "required": true,
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to be deactivated",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "example": 1
          },
          {
            "name": "groupIdsList",
            "in": "query",
            "description": "List of group IDs to deactivate the user from",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int32" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserResponse of deactivated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponseV2" }
              }
            }
          },
          "400": {
            "description": "Bad Request: Admin's access cannot be updated or deactivated."
          }
        }
      }
    },
    "/tags/untag/{coinString}/{subAccountName}": {
      "delete": {
        "tags": ["Workers"],
        "summary": "Untag Workers",
        "description": "Untag a list of workers. Requires permission to edit workers.",
        "operationId": "untagWorkers",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin string. valid values are \"BTC\" or \"BCH\"",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub-account name associated with the tag",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          }
        ],
        "requestBody": {
          "description": "List of worker ids to be untagged",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "integer", "format": "int64" }
              },
              "example": [1, 2, 3, 4, 5]
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "No Content: Untag successful" }
        }
      }
    },
    "/sub_account/{subAccountName}": {
      "delete": {
        "tags": ["Sub-Account"],
        "summary": "Delete Sub-Account",
        "description": "Delete sub-account with no mining history. Requires permission to create sub-account.",
        "operationId": "deleteSubAccount",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of the sub-account to be deleted",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          }
        ],
        "responses": { "204": { "description": "No Content" } }
      }
    },
    "/api_keys/{subAccountName}/{apiKey}": {
      "delete": {
        "tags": ["Sub-Account Settings"],
        "summary": "Delete API key",
        "description": "Delete API key for a given sub-account. Requires permission to view hashrate.",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Name of sub-account.",
            "required": true,
            "schema": { "type": "string" },
            "example": "subAccount1"
          },
          {
            "name": "apiKey",
            "in": "path",
            "description": "API key to delete.",
            "required": true,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        ],
        "responses": { "204": { "description": "No Content" } }
      }
    },
    "/alerts/{coinString}/{subAccountName}/{alertId}": {
      "delete": {
        "tags": ["Alerts"],
        "summary": "Delete Alert",
        "description": "Delete an alert. Requires permission to edit workers.",
        "operationId": "deleteAlert",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub Account Name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "alertId",
            "in": "path",
            "description": "Alert ID",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "example": 1
          }
        ],
        "responses": { "204": { "description": "No Content" } }
      }
    },
    "/alerts/removeEmail/{coinString}/{subAccountName}/{alertId}/{emailAddress}": {
      "delete": {
        "tags": ["Alerts"],
        "summary": "Remove Email From The Alert",
        "description": "Remove email from the alert. Requires permission to edit workers.",
        "operationId": "removeEmailFromAlert",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2.0 access token. Not required if using API key.",
            "schema": { "type": "string" },
            "example": "Bearer [access token]"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "API key. Not required if using access token.",
            "required": false,
            "schema": { "type": "string" },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "coinString",
            "in": "path",
            "description": "Coin",
            "required": true,
            "schema": { "type": "string" },
            "example": "BTC"
          },
          {
            "name": "subAccountName",
            "in": "path",
            "description": "Sub Account Name",
            "required": true,
            "schema": { "type": "string" },
            "example": "subaccount1"
          },
          {
            "name": "alertId",
            "in": "path",
            "description": "Alert ID",
            "required": true,
            "schema": { "type": "integer", "format": "int32" },
            "example": 1
          },
          {
            "name": "emailAddress",
            "in": "path",
            "description": "Email Address to be added to the alert.",
            "required": true,
            "schema": { "type": "string" },
            "example": "abc@aaa.com"
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request: Alert does not exist, Email address is invalid."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "WalletResponse": {
        "required": [
          "address",
          "allocationPercent",
          "createdAt",
          "isApprovalActionRequired",
          "isAutoWithdraw",
          "label",
          "status"
        ],
        "type": "object",
        "properties": {
          "address": { "type": "string" },
          "label": { "type": "string" },
          "status": { "type": "string" },
          "allocationPercent": { "type": "number" },
          "createdAt": { "type": "string", "format": "date-time" },
          "isAutoWithdraw": { "type": "boolean" },
          "subAccountWalletId": { "type": "integer", "format": "int32" },
          "approvalRequestId": { "type": "integer", "format": "int32" },
          "isApprovalActionRequired": { "type": "boolean" },
          "approvalThreshold": { "type": "integer", "format": "int32" },
          "approvers": { "type": "string" }
        }
      },
      "UserGroupResponse": {
        "required": [
          "defaultSubAccountRoleName",
          "groupName",
          "isApprovalActionRequired",
          "roleName"
        ],
        "type": "object",
        "properties": {
          "groupName": { "type": "string" },
          "roleName": { "type": "string" },
          "defaultSubAccountRoleName": { "type": "string" },
          "approvalRequestId": { "type": "integer", "format": "int32" },
          "isApprovalActionRequired": { "type": "boolean" },
          "approvalThreshold": { "type": "integer", "format": "int32" },
          "approvalStatus": { "type": "string" },
          "approvers": { "type": "string" }
        }
      },
      "UserResponseV2": {
        "required": ["emailAddress", "fullName"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "emailAddress": { "type": "string" },
          "fullName": { "type": "string" },
          "groups": {
            "uniqueItems": true,
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserGroupResponse" }
          }
        }
      },
      "AddUserToSubAccountRequest": {
        "type": "object",
        "properties": { "userRoleName": { "type": "string" } }
      },
      "WalletAllocationRequest": {
        "required": ["allocationPercent", "autoWithdraw", "subAccountWalletId"],
        "type": "object",
        "properties": {
          "subAccountWalletId": {
            "type": "integer",
            "description": "Sub Account Wallet id of the wallet",
            "format": "int32",
            "example": 1
          },
          "allocationPercent": {
            "type": "number",
            "description": "Allocation percentage for this wallet. Up to 3 decimals of precision.",
            "example": 49.001
          },
          "autoWithdraw": {
            "type": "boolean",
            "description": "Auto Withdraw toggle",
            "example": true
          }
        }
      },
      "NewUserRequestV2": {
        "required": ["emailAddress", "fullName", "groups", "preferredName"],
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "Email Address of user"
          },
          "fullName": {
            "type": "string",
            "description": "Full Name of new user - blank if adding an existing user to a group."
          },
          "preferredName": {
            "type": "string",
            "description": "Preferred Name for new user - blank if adding an existing user to a group."
          },
          "groups": {
            "type": "array",
            "description": "List of UserGroupRequest objects",
            "items": { "$ref": "#/components/schemas/UserGroupRequest" }
          },
          "apiUser": {
            "type": "boolean",
            "description": "True for API-Only users.",
            "default": false
          },
          "ips": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of API User's IPs. Only valid if apiUser equals true.",
            "items": {
              "type": "string",
              "description": "List of API User's IPs. Only valid if apiUser equals true."
            }
          }
        }
      },
      "UserGroupRequest": {
        "required": ["groupName", "subaccountRoleName"],
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "The name of the group"
          },
          "subaccountRoleName": {
            "type": "string",
            "description": "Role of new user for that group. Valid values are \"owner\", \"accountant\" or \"technician\""
          }
        },
        "description": "List of UserGroupRequest objects"
      },
      "SubAccountAccessRequest": {
        "required": ["userSubAccountAccess"],
        "type": "object",
        "properties": {
          "userSubAccountAccess": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSubAccountAccessRequest"
            }
          }
        }
      },
      "UserSubAccountAccessRequest": {
        "type": "object",
        "properties": {
          "userId": { "type": "integer", "format": "int32" },
          "subAccountRole": { "type": "string" }
        }
      },
      "WorkerResponse": {
        "required": [
          "hashrate_15m",
          "hashrate_1h",
          "hashrate_5m",
          "lastShareTime",
          "reject15mPercent",
          "rejectDetail_15m",
          "rejectDetail_1h",
          "reject_15m",
          "reject_1h",
          "stale15mPercent",
          "stale_15m",
          "stale_1h",
          "tag",
          "workerId",
          "workerName"
        ],
        "type": "object",
        "properties": {
          "workerId": { "type": "string" },
          "workerName": { "type": "string" },
          "hashrate_5m": { "type": "integer", "format": "int64" },
          "hashrate_15m": { "type": "integer", "format": "int64" },
          "stale_15m": { "type": "integer", "format": "int64" },
          "stale15mPercent": { "type": "number", "format": "double" },
          "reject_15m": { "type": "integer", "format": "int64" },
          "reject15mPercent": { "type": "number", "format": "double" },
          "rejectDetail_15m": { "type": "string" },
          "hashrate_1h": { "type": "integer", "format": "int64" },
          "stale_1h": { "type": "integer", "format": "int64" },
          "reject_1h": { "type": "integer", "format": "int64" },
          "rejectDetail_1h": { "type": "string" },
          "lastShareTime": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "tag": { "type": "string" }
        }
      },
      "WorkersResponse": {
        "required": ["totalWorkerCount", "workersList"],
        "type": "object",
        "properties": {
          "workersList": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WorkerResponse" }
          },
          "totalWorkerCount": { "type": "integer", "format": "int64" }
        }
      },
      "WorkerCounts": {
        "required": [
          "offline15MinWorkerCount",
          "offline24HrWorkerCount",
          "workerCount"
        ],
        "type": "object",
        "properties": {
          "workerCount": { "type": "integer", "format": "int32" },
          "offline15MinWorkerCount": { "type": "integer", "format": "int32" },
          "offline24HrWorkerCount": { "type": "integer", "format": "int32" }
        }
      },
      "HashrateResponse": {
        "required": [
          "hashrateAccepted",
          "hashrateRejected",
          "hashrateStale",
          "time",
          "unixTime"
        ],
        "type": "object",
        "properties": {
          "time": { "type": "string", "format": "date-time" },
          "endTime": { "type": "string", "format": "date-time" },
          "unixTime": { "type": "integer", "format": "int64" },
          "hashrateAccepted": { "type": "integer", "format": "int64" },
          "hashrateStale": { "type": "integer", "format": "int64" },
          "hashrateRejected": { "type": "integer", "format": "int64" },
          "averageWorkers": { "type": "number", "format": "double" }
        }
      },
      "WalletsResponse": {
        "required": ["walletList"],
        "type": "object",
        "properties": {
          "walletList": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WalletResponse" }
          }
        }
      },
      "GroupWithUsersResponseV2": {
        "required": ["name", "users"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "name": { "type": "string" },
          "users": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserResponse" }
          }
        }
      },
      "UserResponse": {
        "required": [
          "emailAddress",
          "fullName",
          "groupName",
          "isApprovalActionRequired",
          "roleName"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "emailAddress": { "type": "string" },
          "fullName": { "type": "string" },
          "groupName": { "type": "string" },
          "roleName": { "type": "string" },
          "approvalRequestId": { "type": "integer", "format": "int32" },
          "isApprovalActionRequired": { "type": "boolean" },
          "approvalThreshold": { "type": "integer", "format": "int32" },
          "status": { "type": "string" },
          "approvers": { "type": "string" }
        }
      },
      "ActivityLogEntryV2": {
        "required": [
          "activityAt",
          "activityDetails",
          "activityType",
          "description",
          "ip"
        ],
        "type": "object",
        "properties": {
          "userType": { "type": "string" },
          "groupId": { "type": "integer", "format": "int32" },
          "userEmail": { "type": "string" },
          "ip": { "type": "string" },
          "subAccount": { "type": "string" },
          "coin": { "type": "string" },
          "activityType": { "type": "string" },
          "activityDetails": { "type": "string" },
          "activityAt": { "type": "string", "format": "date-time" },
          "description": { "type": "string" }
        }
      },
      "ActivityLogResponseV2": {
        "required": ["activityLogs", "groupName", "totalLogCount"],
        "type": "object",
        "properties": {
          "activityLogs": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ActivityLogEntryV2" }
          },
          "totalLogCount": { "type": "integer", "format": "int64" },
          "groupName": { "type": "string" }
        }
      },
      "ActivityLogResponseV2WithTotal": {
        "required": ["activityLogResponses", "totalLogs"],
        "type": "object",
        "properties": {
          "activityLogResponses": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ActivityLogResponseV2" }
          },
          "totalLogs": { "type": "integer", "format": "int64" }
        }
      },
      "AdminRole": {
        "required": ["adminRead", "adminWrite", "id", "roleName"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "roleName": { "type": "string" },
          "adminRead": { "type": "boolean" },
          "adminWrite": { "type": "boolean" }
        }
      },
      "Group": {
        "required": ["approvalThreshold", "id", "name", "ppsFeeRate"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "name": { "type": "string" },
          "ppsFeeRate": { "type": "number" },
          "approvalThreshold": { "type": "integer", "format": "int32" }
        }
      },
      "User": {
        "required": [
          "adminRole",
          "authId",
          "createdAt",
          "emailAddress",
          "fullName",
          "group",
          "groups",
          "id",
          "isActive",
          "preferredName",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "emailAddress": { "type": "string" },
          "fullName": { "type": "string" },
          "preferredName": { "type": "string" },
          "isActive": { "type": "boolean" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "group": { "$ref": "#/components/schemas/Group" },
          "groups": {
            "uniqueItems": true,
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserGroup" }
          },
          "authId": { "type": "string" },
          "adminRole": { "$ref": "#/components/schemas/AdminRole" }
        }
      },
      "UserGroup": {
        "required": [
          "createdAt",
          "defaultSubAccountRole",
          "group",
          "id",
          "updatedAt",
          "userRole"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "group": { "$ref": "#/components/schemas/Group" },
          "userRole": { "$ref": "#/components/schemas/UserRole" },
          "defaultSubAccountRole": {
            "$ref": "#/components/schemas/UserSubAccountRole"
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "UserRole": {
        "required": [
          "approve",
          "createSubAccounts",
          "id",
          "manageUsers",
          "roleName"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "roleName": { "type": "string" },
          "createSubAccounts": { "type": "boolean" },
          "manageUsers": { "type": "boolean" },
          "approve": { "type": "boolean" }
        }
      },
      "UserSubAccountRole": {
        "required": [
          "approve",
          "editWorkers",
          "id",
          "manageApiKeys",
          "roleName",
          "setRoles",
          "viewHashrate",
          "viewPayments",
          "withdraw"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "roleName": { "type": "string" },
          "viewHashrate": { "type": "boolean" },
          "viewPayments": { "type": "boolean" },
          "withdraw": { "type": "boolean" },
          "setRoles": { "type": "boolean" },
          "editWorkers": { "type": "boolean" },
          "manageApiKeys": { "type": "boolean" },
          "approve": { "type": "boolean" }
        }
      },
      "TransactionResponse": {
        "required": ["amount", "description", "time", "type"],
        "type": "object",
        "properties": {
          "time": { "type": "string", "format": "date-time" },
          "broadcastTime": { "type": "string", "format": "date-time" },
          "amount": { "type": "number" },
          "type": { "type": "string" },
          "description": { "type": "string" },
          "txId": { "type": "string" },
          "address": { "type": "string" }
        }
      },
      "TagResponse": {
        "required": ["tagId", "tagName"],
        "type": "object",
        "properties": {
          "tagId": { "type": "integer", "format": "int32" },
          "tagName": { "type": "string" }
        }
      },
      "TagsResponse": {
        "required": ["tags"],
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TagResponse" }
          }
        }
      },
      "SubAccountStatsWithoutOwnersResponse": {
        "required": [
          "activeWorkers",
          "fcmOptIn",
          "hashrate15minAvg",
          "hashrate1hrAvg",
          "hashrate24hrAvg",
          "hashrate5minAvg",
          "lastShareTime",
          "name",
          "offline15MinWorkerCount",
          "offline24HrWorkerCount",
          "reject15minAvg",
          "reject1hrAvg",
          "stale15minAvg",
          "stale1hrAvg",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "activeWorkers": { "type": "integer", "format": "int32" },
          "offline15MinWorkerCount": { "type": "integer", "format": "int32" },
          "offline24HrWorkerCount": { "type": "integer", "format": "int32" },
          "hashrate5minAvg": { "type": "integer", "format": "int64" },
          "hashrate15minAvg": { "type": "integer", "format": "int64" },
          "stale15minAvg": { "type": "integer", "format": "int64" },
          "reject15minAvg": { "type": "integer", "format": "int64" },
          "hashrate1hrAvg": { "type": "integer", "format": "int64" },
          "hashrate24hrAvg": { "type": "integer", "format": "int64" },
          "stale1hrAvg": { "type": "integer", "format": "int64" },
          "reject1hrAvg": { "type": "integer", "format": "int64" },
          "lastShareTime": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "fcmOptIn": { "type": "boolean" }
        }
      },
      "PoolStats": {
        "required": [
          "activeWorkers",
          "hashrate15minAvg",
          "hashrate1hrAvg",
          "hashrate24hrAvg",
          "hashrate5minAvg",
          "lastShareTime",
          "reject15minAvg",
          "reject1hrAvg",
          "stale15minAvg",
          "stale1hrAvg",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "activeWorkers": { "type": "integer", "format": "int32" },
          "hashrate5minAvg": { "type": "integer", "format": "int64" },
          "hashrate15minAvg": { "type": "integer", "format": "int64" },
          "stale15minAvg": { "type": "integer", "format": "int64" },
          "reject15minAvg": { "type": "integer", "format": "int64" },
          "hashrate1hrAvg": { "type": "integer", "format": "int64" },
          "hashrate24hrAvg": { "type": "integer", "format": "int64" },
          "stale1hrAvg": { "type": "integer", "format": "int64" },
          "reject1hrAvg": { "type": "integer", "format": "int64" },
          "lastShareTime": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      },
      "SubAccountStatsWithRoleResponse": {
        "required": [
          "activeWorkers",
          "fcmOptIn",
          "groupId",
          "groupName",
          "hashrate15minAvg",
          "hashrate1hrAvg",
          "hashrate24hrAvg",
          "hashrate5minAvg",
          "lastShareTime",
          "name",
          "offline15MinWorkerCount",
          "offline24HrWorkerCount",
          "reject15minAvg",
          "reject1hrAvg",
          "role",
          "stale15minAvg",
          "stale1hrAvg",
          "subAccountUsers",
          "subAccountUsersPermission",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "activeWorkers": { "type": "integer", "format": "int32" },
          "offline15MinWorkerCount": { "type": "integer", "format": "int32" },
          "offline24HrWorkerCount": { "type": "integer", "format": "int32" },
          "hashrate5minAvg": { "type": "integer", "format": "int64" },
          "hashrate15minAvg": { "type": "integer", "format": "int64" },
          "stale15minAvg": { "type": "integer", "format": "int64" },
          "reject15minAvg": { "type": "integer", "format": "int64" },
          "hashrate1hrAvg": { "type": "integer", "format": "int64" },
          "hashrate24hrAvg": { "type": "integer", "format": "int64" },
          "stale1hrAvg": { "type": "integer", "format": "int64" },
          "reject1hrAvg": { "type": "integer", "format": "int64" },
          "lastShareTime": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "role": { "type": "string" },
          "subAccountUsers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserSubAccountResponse" }
          },
          "subAccountUsersPermission": { "type": "boolean" },
          "groupId": { "type": "integer", "format": "int32" },
          "groupName": { "type": "string" },
          "fcmOptIn": { "type": "boolean" }
        }
      },
      "UserSubAccountResponse": {
        "required": [
          "defaultSubAccountRoleName",
          "emailAddress",
          "fullName",
          "groupName",
          "isApprovalActionRequired",
          "roleName",
          "subAccountName",
          "userId"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "userId": { "type": "integer", "format": "int32" },
          "emailAddress": { "type": "string" },
          "fullName": { "type": "string" },
          "groupName": { "type": "string" },
          "subAccountName": { "type": "string" },
          "roleName": { "type": "string" },
          "defaultSubAccountRoleName": { "type": "string" },
          "approvalRequestId": { "type": "integer", "format": "int32" },
          "isApprovalActionRequired": { "type": "boolean" },
          "approvalThreshold": { "type": "integer", "format": "int32" },
          "status": { "type": "string" },
          "approvers": { "type": "string" }
        }
      },
      "UserSubAccountRoleResponse": {
        "required": [
          "approve",
          "editWorkers",
          "manageApiKeys",
          "roleName",
          "setRoles",
          "viewHashrate",
          "viewPayments",
          "withdraw"
        ],
        "type": "object",
        "properties": {
          "roleName": { "type": "string" },
          "viewHashrate": { "type": "boolean" },
          "viewPayments": { "type": "boolean" },
          "withdraw": { "type": "boolean" },
          "setRoles": { "type": "boolean" },
          "editWorkers": { "type": "boolean" },
          "manageApiKeys": { "type": "boolean" },
          "approve": { "type": "boolean" }
        }
      },
      "BalanceResponse": {
        "required": [
          "balance",
          "totalDebits",
          "totalEarned",
          "totalFCMFees",
          "totalFees",
          "totalWithdrawn"
        ],
        "type": "object",
        "properties": {
          "balance": { "type": "number" },
          "totalEarned": { "type": "number" },
          "totalFCMFees": { "type": "number" },
          "totalDebits": { "type": "number" },
          "totalFees": { "type": "number" },
          "totalWithdrawn": { "type": "number" }
        }
      },
      "SubAccountFinancialStatsResponse": {
        "required": [
          "autoWithdraw",
          "earningsInfo",
          "feeAmount",
          "groupId",
          "groupName",
          "hashratePrevDay",
          "ppsBaseAmount",
          "statsDate",
          "subAccountName",
          "totalEarnedInDuration",
          "totalFeesInDuration",
          "totalWithdrawnInDuration",
          "txFeeRewardAmount"
        ],
        "type": "object",
        "properties": {
          "statsDate": { "type": "string", "format": "date-time" },
          "subAccountName": { "type": "string" },
          "hashratePrevDay": { "type": "integer", "format": "int64" },
          "ppsBaseAmount": { "type": "number" },
          "txFeeRewardAmount": { "type": "number" },
          "feeAmount": { "type": "number" },
          "totalEarnedInDuration": { "type": "number" },
          "totalFeesInDuration": { "type": "number" },
          "totalWithdrawnInDuration": { "type": "number" },
          "earningsInfo": { "$ref": "#/components/schemas/BalanceResponse" },
          "autoWithdraw": { "type": "boolean" },
          "groupId": { "type": "integer", "format": "int32" },
          "groupName": { "type": "string" }
        }
      },
      "SubAccountsFinancialStatsResponse": {
        "required": ["subAccountFinancialStatsList", "totalOfSubAccountStats"],
        "type": "object",
        "properties": {
          "subAccountFinancialStatsList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubAccountFinancialStatsResponse"
            }
          },
          "totalOfSubAccountStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalStatsForSubAccountGroup"
            }
          }
        }
      },
      "TotalStatsForSubAccountGroup": {
        "required": [
          "balanceToDate",
          "groupName",
          "totalEarnedInDuration",
          "totalEarnedToDate",
          "totalFeeAmount",
          "totalFeesInDuration",
          "totalFeesToDate",
          "totalHashratePrevDay",
          "totalPpsBaseAmount",
          "totalTxFeeRewardAmount",
          "totalWithdrawnInDuration",
          "totalWithdrawnToDate"
        ],
        "type": "object",
        "properties": {
          "groupName": { "type": "string" },
          "totalHashratePrevDay": { "type": "integer", "format": "int64" },
          "totalPpsBaseAmount": { "type": "number" },
          "totalTxFeeRewardAmount": { "type": "number" },
          "totalFeeAmount": { "type": "number" },
          "totalEarnedInDuration": { "type": "number" },
          "totalFeesInDuration": { "type": "number" },
          "totalWithdrawnInDuration": { "type": "number" },
          "totalEarnedToDate": { "type": "number" },
          "totalFeesToDate": { "type": "number" },
          "totalWithdrawnToDate": { "type": "number" },
          "balanceToDate": { "type": "number" }
        }
      },
      "EarningResponse": {
        "required": [
          "endTime",
          "feeAmount",
          "feeRatePercent",
          "fppsRatePercent",
          "hashrate",
          "ppsBaseAmount",
          "startTime",
          "totalAmount",
          "txFeeRewardAmount"
        ],
        "type": "object",
        "properties": {
          "startTime": { "type": "string", "format": "date-time" },
          "endTime": { "type": "string", "format": "date-time" },
          "totalAmount": { "type": "number" },
          "hashrate": { "type": "integer", "format": "int64" },
          "ppsBaseAmount": { "type": "number" },
          "txFeeRewardAmount": { "type": "number" },
          "fppsRatePercent": { "type": "number" },
          "feeAmount": { "type": "number" },
          "feeRatePercent": { "type": "number" }
        }
      },
      "CumulativeSubAccountStats": {
        "required": [
          "activeWorkers",
          "hashrate15minAvg",
          "hashrate1hrAvg",
          "hashrate24hrAvg",
          "hashrate5minAvg",
          "lastShareTime",
          "offline15MinWorkerCount",
          "offline24HrWorkerCount",
          "reject15minAvg",
          "reject1hrAvg",
          "stale15minAvg",
          "stale1hrAvg",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "activeWorkers": { "type": "integer", "format": "int32" },
          "offline15MinWorkerCount": { "type": "integer", "format": "int32" },
          "offline24HrWorkerCount": { "type": "integer", "format": "int32" },
          "hashrate5minAvg": { "type": "integer", "format": "int64" },
          "hashrate15minAvg": { "type": "integer", "format": "int64" },
          "stale15minAvg": { "type": "integer", "format": "int64" },
          "reject15minAvg": { "type": "integer", "format": "int64" },
          "hashrate1hrAvg": { "type": "integer", "format": "int64" },
          "hashrate24hrAvg": { "type": "integer", "format": "int64" },
          "stale1hrAvg": { "type": "integer", "format": "int64" },
          "reject1hrAvg": { "type": "integer", "format": "int64" },
          "lastShareTime": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "TagAlertResponse": {
        "required": [
          "activeWorkersThreshold",
          "alertId",
          "emailList",
          "hashrateThreshold",
          "tagName"
        ],
        "type": "object",
        "properties": {
          "tagName": { "type": "string" },
          "alertId": { "type": "integer", "format": "int32" },
          "hashrateThreshold": { "type": "integer", "format": "int64" },
          "activeWorkersThreshold": { "type": "integer", "format": "int32" },
          "emailList": { "type": "array", "items": { "type": "string" } }
        }
      },
      "TagAlertsResponse": {
        "required": ["tagAlerts"],
        "type": "object",
        "properties": {
          "tagAlerts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TagAlertResponse" }
          }
        }
      },
      "ActivityTypesEnumResponse": {
        "required": ["activityName", "description"],
        "type": "object",
        "properties": {
          "activityName": { "type": "string" },
          "description": { "type": "string" }
        }
      },
      "AccessToken": {
        "required": ["access_token", "expires_in", "token_type"],
        "type": "object",
        "properties": {
          "access_token": { "type": "string" },
          "expires_in": { "type": "integer", "format": "int32" },
          "token_type": { "type": "string" }
        }
      }
    }
  }
}
